exec("import re;import base64");exec(base64.b64decode("##############BIBLIOTECAS A IMPORTAR E DEFINICOES####################
import urllib,urllib2,sys,re,xbmcplugin,xbmcgui,xbmcaddon,xbmc,os,json,glob,threading,gzip,xbmcvfs,cookielib,pprint,datetime,thread,time,urlparse,base64,plugintools,calendar
import xml.etree.ElementTree as ET
import fileUtils as fu
import ast
from resources.lib import common
from urllib2 import Request, urlopen
from datetime import date
from bs4 import BeautifulSoup
from resources.lib import Downloader #Enen92 class
from resources.lib import Player
from resources.lib import TVArchive
from t0mm0.common.net import Net
from t0mm0.common.addon import Addon
from t0mm0.common.net import HttpResponse
from resources.lib import URLResolverMedia
from resources.lib import Trakt
from resources.lib import Database
from unicodedata import normalize
try:
    import ssl
    context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
except:
    pass
####################################################### CONSTANTES #####################################################

global g_timer
global televisioonilink
global filmilink
global andmelink
global uuenduslink
global uuendused
global vanemalukk
global version
global mode

reload(sys)
sys.setdefaultencoding('utf8')
mode = 3333
version = ""
kasutajanimi = ""
salasona = ""
lehekylg = ""
vanemakood = ""
vanemalukk = ""
televisioonilink = ""
filmilink = ""
andmelink = ""

_LIILL_ = "aHR0cDovL2xpdmVpdGtvZGkuY29tL1BIUC92YWxpZGF0ZUFQUC5waHA="
_LIILL_2 = "aHR0cDovL2xpdmVpdGtvZGkuY29tL1BIUC9saXZlaXQvbG9naW5BUFAucGhw"
__ADDON_ID__	= xbmcaddon.Addon().getAddonInfo("id")
__ADDON__	= xbmcaddon.Addon(__ADDON_ID__)
__ADDONVERSION__ = __ADDON__.getAddonInfo('version')
AddonTitle = __ADDON__.getAddonInfo('name')
DNS_DEFINE = ''
__ADDON_FOLDER__	= __ADDON__.getAddonInfo('path')
__SETTING__	= xbmcaddon.Addon().getSetting
__ART_FOLDER__	= __ADDON_FOLDER__ + '/resources/img/'
__SKIN__ = 'v2'
__Qualidade__ = __ADDON__.getSetting('qualidadeFilmes')
__FANART__ = os.path.join(__ART_FOLDER__, __SKIN__, 'fundo.png')
__PASTA_DADOS__ = Addon(__ADDON_ID__).get_profile().decode("utf-8")
__API__ = base64.urlsafe_b64decode('aHR0cDovL21wYXBpLm1sLw==')
__API_SITE__ = base64.urlsafe_b64decode('aHR0cDovL21wYXBpLm1sL2FwaW5ldy8=')
__SITE__ = base64.urlsafe_b64decode('aHR0cDovL21ycGlyYWN5LmdxLw==')
__FOLDER_EPG__ = os.path.join(__PASTA_DADOS__,'epglivenow')
__COOKIE_FILE__ = os.path.join(__PASTA_DADOS__,'livenow')
__SITEAddon__ = base64.urlsafe_b64decode('aHR0cDovL3d3dy5wY3RlY2tzZXJ2LmNvbS9HcnVwb0tvZGkvQWRkb24v')
__SITEBD__ = base64.urlsafe_b64decode('aHR0cDovL3d3dy5wY3RlY2tzZXJ2LmNvbS9HcnVwb0tvZGkvUEhQLw==')
_ICON_ = os.path.join(__ART_FOLDER__, __SKIN__, 'icon.png')
__HEADERS__ = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:43.0) Gecko/20100101 Firefox/43.0', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'}
headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:43.0) Gecko/20100101 Firefox/43.0', 'Accept-Charset': 'utf-8;q=0.7,*;q=0.7', 'Content-Type': 'application/json'}

Cat = __ADDON__.getSetting("Cat")
cOrdNCF = __ADDON__.getSetting("cOrdNCF")
cOrdNCS = __ADDON__.getSetting("cOrdNCS")

Clista=[ "todos", "acao", "animacao", "aventura", "comedia", "drama", "fantasia", "ficcao-cientifica", "romance", "suspense", "terror"]
Clista3=["Sem filtro (Mostrar Todos)","Ação", "Animação", "Aventura", "Comédia", "Drama", "Fantasia", "Ficção-Científica", "Romance", "Suspense", "Terror"]

def setViewS():
	xbmcplugin.setContent(int(sys.argv[1]), 'tvshows')
def setViewM():
	xbmcplugin.setContent(int(sys.argv[1]), 'movies')

###################################################################################
#							  Iniciar Addon										  #
###################################################################################

def __ALERTA__(text1="",text2="",text3=""):
	if text3=="": xbmcgui.Dialog().ok(text1,text2)
	elif text2=="": xbmcgui.Dialog().ok("",text1)
	else: xbmcgui.Dialog().ok(text1,text2,text3)

def criarMenu(pai,nome,logo,url,tipo,fanart):
	menus = {
			'nome': '',
			'logo': '',
			'url': '',
			'tipo': '',
			'fanart': ''
			}
	menus['nome'] = nome
	menus['logo'] = logo
	menus['url'] = url
	menus['tipo'] = tipo
	menus['fanart'] = fanart
	pai.append(menus)
	
def menu():
	if (not __ADDON__.getSetting('login_name') or not __ADDON__.getSetting('login_password')):
		__ALERTA__(AddonTitle, 'Precisa de definir o seu Utilizador e Senha')
		abrirDefinincoes()
		
	else:	
		check_login2 = loginpainel()
		if check_login2['user']['Erro'] != '':
			__ALERTA__(AddonTitle, check_login2['user']['Erro'])
		else:
			_LIILL_ = check_login2['user']['DNS']
			check_login = loginLiveit(_LIILL_)
			#check_login = login(_LIILL_)
			if check_login['user']['resultado'] == 'yes':
				if check_login['user']['estado'] == 'Inactivo':
					__ALERTA__(AddonTitle, 'A sua conta está Expirada. Por favor faça a sua Renovação ou Reactivação.')		
				else:
					if check_login['user']['trial'] == 'Teste':
						__ALERTA__(AddonTitle, 'A conta é uma conta de Teste. Após o teste e gostar faça a sua Aquisição.')
					if check_login['user']['data'] == '0' and check_login['user']['trial'] != 'Teste':
						__ALERTA__(AddonTitle, 'A sua conta expira Hoje. Faça já a sua Renovação.')
					else:
						if check_login['user']['dias'] == '5' or check_login['user']['dias'] == '4' or check_login['user']['dias'] == '3' or check_login['user']['dias'] == '2' or check_login['user']['dias'] == '1':
							__ALERTA__(AddonTitle, 'A sua conta expira daqui a '+str(check_login['user']['data'])+ ' dias. Faça já a sua Renovação.')
					criarMenu(check_login['menus'],"Minha Conta",os.path.join(__ART_FOLDER__, __SKIN__, 'ico_con.png'),_LIILL_,"conta",os.path.join(__ART_FOLDER__, __SKIN__, 'fundo_con.png'))
					criarMenu(check_login['menus'],"Ver TV",os.path.join(__ART_FOLDER__, __SKIN__, 'ico_tv.png'),_LIILL_,"tv",os.path.join(__ART_FOLDER__, __SKIN__, 'fundo_tv.png'))
					criarMenu(check_login['menus'],"Vídeo Clube",os.path.join(__ART_FOLDER__, __SKIN__, 'ico_vid.png'),_LIILL_,"filmes",os.path.join(__ART_FOLDER__, __SKIN__, 'fundo_vid.png'))
					criarMenu(check_login['menus'],"TV Archive",os.path.join(__ART_FOLDER__, __SKIN__, 'ico_tv_arc.png'),_LIILL_,"tvarchive",os.path.join(__ART_FOLDER__, __SKIN__, 'fundo_tv_arc.png'))
					
					filmes_app = check_login2['user']['Filmes_app'];
					if filmes_app == 4 or filmes_app == '4':
						criarMenu(check_login['menus'],"Extras",__ADDON__.getSetting("acess_Token")+"Addon/Imagens/novidadestv.png","extras","extras",os.path.join(__ART_FOLDER__, __SKIN__, 'fundo_tv_arc.png'))
					criarMenu(check_login['menus'],"Configurações",os.path.join(__ART_FOLDER__, __SKIN__, 'ico_def.png'),"configurar","configurar",os.path.join(__ART_FOLDER__, __SKIN__, 'fundo_def.png'))
					criarMenu(check_login['menus'],"Limpar Cache",os.path.join(__ART_FOLDER__, __SKIN__, 'ico_lim.png'),"limparcache","limparcache",os.path.join(__ART_FOLDER__, __SKIN__, 'fundo_lim.png'))
					criarMenu(check_login['menus'],"Limpar Tudo Gravado",os.path.join(__ART_FOLDER__, __SKIN__, 'ico_lim.png'),"limpartudo","limpartudo",os.path.join(__ART_FOLDER__, __SKIN__, 'fundo_lim.png'))
					if(check_login2['user']['Email'] != '' and check_login2['user']['Email'] != 'email'):
						addLinkCanalLista("[COLOR = white]Email Dúvidas: [/COLOR]"+check_login2['user']['Email'],"","",os.path.join(__ART_FOLDER__, __SKIN__, 'ico_con.png'),os.path.join(__ART_FOLDER__, __SKIN__, 'fundo_con.png'),'')
					if(check_login2['user']['WebSite'] != '' and check_login2['user']['WebSite'] != 'http://'):
						addLinkCanalLista("[COLOR = white]Aquisição: [/COLOR]"+check_login2['user']['WebSite'],"","",os.path.join(__ART_FOLDER__, __SKIN__, 'ico_con.png'),os.path.join(__ART_FOLDER__, __SKIN__, 'fundo_con.png'),'')
					Menu_inicial(check_login,False,'')
				__EPG__ = _LIILL_+'xmltv.php?username='+__ADDON__.getSetting('login_name')+'&password='+__ADDON__.getSetting('login_password')+'&epg_shift=0'
				__ADDON__.setSetting('lista_epg', __EPG__)
				thread.start_new_thread(obter_ficheiro_epg, () )
				vista_menu()
			elif check_login['user']['resultado'] == 'utilizador':
				__ALERTA__(AddonTitle, 'Utilizador incorreto.')
				addDir('Alterar Definições', 'url', None, 1000, 'Miniatura', __SITEAddon__+"Imagens/definicoes.png",'','','','',__SITEAddon__+"Imagens/definicoes_fanart.png")
				addDir('Entrar novamente', 'url', None, None, 'Miniatura', __SITEAddon__+"Imagens/retroceder.png",'','','','',os.path.join(__ART_FOLDER__, __SKIN__, 'fundo_addon.png'))
				vista_menu()
			elif check_login['user']['resultado'] == 'senha':
				__ALERTA__(AddonTitle, 'Senha incorreta.')
				addDir('Alterar Definições', 'url', None, 1000, 'Miniatura', __SITEAddon__+"Imagens/definicoes.png",'','','','',__SITEAddon__+"Imagens/definicoes_fanart.png")
				addDir('Entrar novamente', 'url', None, None, 'Miniatura', __SITEAddon__+"Imagens/retroceder.png",'','','','',os.path.join(__ART_FOLDER__, __SKIN__, 'fundo_addon.png'))
				vista_menu()
			elif check_login['user']['resultado'] == 'ativo':
				__ALERTA__(AddonTitle, 'O estado do seu Utilizador encontra-se Inactivo. Para saber mais informações entre em contacto pelo email liveitkodi@gmail.com.')
				vista_menu()
			else:
				__ALERTA__(AddonTitle, 'Utilizador ou senha Incorrectos. Altere e tente novamente.')
				addDir('Alterar Definições', 'url', 5, 'Miniatura', os.path.join(__ART_FOLDER__, __SKIN__, 'ico_def.png'),'', os.path.join(__ART_FOLDER__, __SKIN__, 'fundo_def.png'))
				addDir('Entrar novamente', 'url', None, 'Miniatura', os.path.join(__ART_FOLDER__, __SKIN__, 'ico_lim.png'),'',os.path.join(__ART_FOLDER__, __SKIN__, 'fundo_lim.png'))
				vista_menu()

###################################################################################
#							  Login Addon										  #
###################################################################################

def loginpainel():
	informacoes = {
		'user' : {
			'Nome': '',
			'Acess_Token': '',
			'DNS': '',
			'Email': '',
			'WebSite': '',
			'VerAPP': '',
			'LinkAPP': '',
			'Erro': '',
			'Series': '',
			'Melhoramentos': '',
			'Client_Secret_User': '',
			'Filmes_app': ''
		}
	}
	try:
		net = Net()
		dados = {'nome_app': AddonTitle, 'tipo_app': 'Addon', 'username': __ADDON__.getSetting("login_name"), 'password': __ADDON__.getSetting("login_password")}
		codigo_fonte = net.http_POST(base64.b64decode(_LIILL_),form_data=dados,headers=__HEADERS__).content
		elems = ET.fromstring(codigo_fonte)
		for child in elems:
			if(child.tag == 'erro'):
				#informacoes['user']['Erro'] = child.text
				informacoes['user']['Nome'] = AddonTitle
				informacoes['user']['Acess_Token'] = ''
				__ADDON__.setSetting('acess_Token', '')
				informacoes['user']['DNS'] = base64.urlsafe_b64decode(__ADDON__.getSetting('dns_addon'))
				__EPG__ = informacoes['user']['DNS']+'xmltv.php?username='+__ADDON__.getSetting('login_name')+'&password='+__ADDON__.getSetting('login_password')+'&epg_shift=0'
				__ADDON__.setSetting('lista_epg', __EPG__)
				informacoes['user']['Email'] = ''
				informacoes['user']['WebSite'] = ''
				informacoes['user']['VerAPP'] = __ADDONVERSION__
				informacoes['user']['LinkAPP'] = ''
				informacoes['user']['Melhoramentos'] = ''
				informacoes['user']['Filmes_app'] = '5'
				__ADDON__.setSetting('email', '')
				__ADDON__.setSetting('password', '')
				informacoes['user']['Client_Secret_User'] = ''
				__ADDON__.setSetting('client_secret_user', '')
			elif(child.tag == 'validacao'):
				for d in child:
					if(d.tag == 'Nome'):
						informacoes['user']['Nome'] = d.text
					elif(d.tag == 'Acess_Token'):
						informacoes['user']['Acess_Token'] = d.text
						__ADDON__.setSetting('acess_Token', d.text)
					elif(d.tag == 'DNS'):
						informacoes['user']['DNS'] = d.text
					elif(d.tag == 'Email'):
						informacoes['user']['Email'] = d.text
					elif(d.tag == 'WebSite'):
						informacoes['user']['WebSite'] = d.text
					elif(d.tag == 'VerAPP'):
						informacoes['user']['VerAPP'] = d.text
					elif(d.tag == 'LinkAPP'):
						informacoes['user']['LinkAPP'] = d.text
					elif(d.tag == 'Melhoramentos'):
						informacoes['user']['Melhoramentos'] = d.text
					elif(d.tag == 'filmes_app'):
						informacoes['user']['Filmes_app'] = d.text
					elif(d.tag == 'user_kodi'):
						__ADDON__.setSetting('email', d.text)
					elif(d.tag == 'senha_kodi'):
						__ADDON__.setSetting('password', d.text)
					elif(d.tag == 'Client_Secret_User'):
						informacoes['user']['Client_Secret_User'] = d.text
						__ADDON__.setSetting('client_secret_user', d.text)
			else:
				__ALERTA__(AddonTitle, 'Não sei o que estou a ler.')
	except:
		informacoes['user']['Nome'] = AddonTitle
		informacoes['user']['Acess_Token'] = ''
		__ADDON__.setSetting('acess_Token', '')
		informacoes['user']['DNS'] = base64.urlsafe_b64decode(__ADDON__.getSetting('dns_addon'))
		__EPG__ = informacoes['user']['DNS']+'xmltv.php?username='+__ADDON__.getSetting('login_name')+'&password='+__ADDON__.getSetting('login_password')+'&epg_shift=0'
		__ADDON__.setSetting('lista_epg', __EPG__)
		informacoes['user']['Email'] = ''
		informacoes['user']['WebSite'] = ''
		informacoes['user']['VerAPP'] = __ADDONVERSION__
		informacoes['user']['LinkAPP'] = ''
		informacoes['user']['Melhoramentos'] = ''
		informacoes['user']['Filmes_app'] = '5'
		__ADDON__.setSetting('email', '')
		__ADDON__.setSetting('password', '')
		informacoes['user']['Client_Secret_User'] = ''
		__ADDON__.setSetting('client_secret_user', '')
		#__ALERTA__(AddonTitle, 'Não foi possível abrir a página. Por favor tente novamente.')
		return informacoes

	return informacoes

def loginLiveit(url):
	informacoes = {
		'user' : {
			'username': '',
			'password': '',
			'estado': '',
			'data': '',
			'dias': '',
			'trial': '',
			'criacao': '',
			'series': '',
			'lista': '',
			'resultado': '',
			'coneccoes': ''
			
		},
		'menus': []
	}
	try:
		net = Net()
		net.set_cookies(__COOKIE_FILE__)
		dados = {'username': __ADDON__.getSetting("login_name"), 'password': __ADDON__.getSetting("login_password")}
		codigo_fonte = net.http_POST(__SITEBD__+'LoginAddon2.php',form_data=dados,headers=__HEADERS__).content
		elems = ET.fromstring(codigo_fonte)
		for child in elems:
			if(child.tag == 'sucesso'):
				informacoes['user']['resultado'] = child.text
			elif(child.tag == 'user'):
				informacoes['user']['lista'] = url
				for d in child:
					if(d.tag == 'DataFim'):
						informacoes['user']['data'] = d.text
					elif(d.tag == 'dias'):
						informacoes['user']['dias'] = d.text
					elif(d.tag == 'DataCriacao'):
						informacoes['user']['criacao'] = d.text
					elif(d.tag == 'Equipamentos'):
						informacoes['user']['coneccoes'] = "[COLOR = white]Maximo de Connec: [/COLOR]"+d.text
					elif(d.tag == 'TipoUser'):
						informacoes['user']['trial'] = d.text
					elif(d.tag == 'Estado'):
						informacoes['user']['estado'] = d.text
					elif(d.tag == 'series'):
						informacoes['user']['series'] = d.text
					elif(d.tag == 'Senha'):
						informacoes['user']['password'] = d.text
					elif(d.tag == 'Utilizador'):
						informacoes['user']['username'] = "[COLOR = white]Utilizador: [/COLOR]"+d.text
			#else:
			#	__ALERTA__(AddonTitle, 'Não sei o que estou a ler.')
	except:
		informacoes['user']['username'] = ""
		informacoes['user']['password'] = ""
		informacoes['user']['estado'] = ""
		informacoes['user']['data'] = ""
		informacoes['user']['trial'] = ""
		informacoes['user']['coneccoes'] = ""
		informacoes['user']['series'] = ""
		informacoes['user']['lista'] = url
		return informacoes
	
	return informacoes

def login(url):
	informacoes = {
		'user' : {
			'username': '',
			'password': '',
			'estado': '',
			'data': '',
			'trial': '',
			'lista': '',
			'coneccoes': ''
			
		},
		'menus': []
	} # 
	andmelink = url+'player_api.php?username='+__ADDON__.getSetting("login_name")+'&password='+__ADDON__.getSetting("login_password")
	andmed = grab_epg(andmelink)
	if andmed != None:
		kasutajaAndmed = andmed[sync_data("dXNlcl9pbmZv")]
		kasutajaAndmed2 = andmed[sync_data("c2VydmVyX2luZm8=")]
		seis = kasutajaAndmed[get_live("c3RhdHVz")]
		aegub = kasutajaAndmed[sync_data("ZXhwX2RhdGU=")]
		if aegub:
			aegub = date.fromtimestamp(int(aegub)).strftime("%Y-%m-%d")
			##eaeaen = kasutajaAndmed2[sync_data("dGltZV9ub3c=")]
			
			viewStartDate = datetime.datetime.now().strftime("%Y-%m-%d")
			
			format = "%Y-%m-%d"
			
			try:
				hoje1 = datetime.datetime.strptime(aegub, format)
			except TypeError:
				hoje1 = datetime.datetime(*(time.strptime(aegub, format)[0:6]))
			
			try:
				hoje2 = datetime.datetime.strptime(viewStartDate, format)
			except TypeError:
				hoje2 = datetime.datetime(*(time.strptime(viewStartDate, format)[0:6]))
			
			aegub = str(abs((hoje1-hoje2).days))
		else:
			aegub = vod_channels("TmV2ZXI=") 
		rabbits = kasutajaAndmed[vod_channels("aXNfdHJpYWw=")]
		if rabbits == "0":
			rabbits = sync_data("Tm8=")
		else:
			rabbits = sync_data("WWVz")
		leavemealone = kasutajaAndmed[get_live("bWF4X2Nvbm5lY3Rpb25z")]
		polarbears = kasutajaAndmed[sync_data("dXNlcm5hbWU=")]
		
		if(polarbears != ''):
			informacoes['user']['username'] = "[COLOR = white]Utilizador: [/COLOR]"+polarbears
			informacoes['user']['estado'] = seis
			informacoes['user']['data'] = aegub
			informacoes['user']['trial'] = rabbits
			informacoes['user']['coneccoes'] = "[COLOR = white]Maximo de Connec: [/COLOR]"+leavemealone
			informacoes['user']['lista'] = url
	
	return informacoes

def login2():
	resultado = False
	try:
		post = urllib.urlencode({'username': __ADDON__.getSetting('email'), 'password': __ADDON__.getSetting('password') })
		resultado = abrir_url(__API_SITE__+'login.php', post=post, header=headers)
		
		if resultado == 'DNS':
			__ALERTA__(AddonTitle, 'Tem de alterar os DNS para poder usufruir do __ADDON__.')
			return False
			
		try:
			resultado = resultado.decode('utf-8')
		except:
			resultado = resultado.encode('utf-8')
		try:
			if resultado['codigo'] == 204:
				__ALERTA__(AddonTitle, resultado['mensagem'])
				return False
		except:
			pass
		
		escrever_ficheiro(os.path.join(__PASTA_DADOS__,'definicoes.liveit'), resultado)
		resultado = json.loads(resultado)
		#colocar o loggedin
		token = resultado['cookie']
		refresh = resultado['expira']
		
		try:
			username = resultado['username'].decode('utf-8')
		except:
			username = resultado['username'].encode('utf-8')
		
		__ADDON__.setSetting('tokenMrpiracy', token)
		__ADDON__.setSetting('refreshMrpiracy', refresh)
		__ADDON__.setSetting('loggedin', username)
		
		categorias = resultado['categorias']
		escrever_ficheiro(os.path.join(__PASTA_DADOS__,'categorias.liveit'), str(categorias))
		return True
	except:
		__ALERTA__(AddonTitle, 'Não foi possível abrir a página. Por favor tente novamente.')
		return False

def Menu_inicial(men,build,tipo):
	_nomeuser = men['user']['username']
	for menu in men['menus']:
		nome = menu['nome']
		logo = menu['logo']
		link = menu['url']
		tipo = menu['tipo']
		fanart = menu['fanart']
		
		if tipo == 'conta' :
			addDir(nome,link,2,'Lista',logo,tipo,fanart)
		elif(tipo == 'tv'):
			addDir(nome,link,3,'Lista',logo,tipo,fanart)
		elif(tipo == 'filmes'):
			addDir(nome,link,1,'Lista',logo,tipo,fanart)
		elif(tipo == 'extras'):
			addDir(nome,link,106,'Lista',logo,tipo,fanart)
		elif(tipo == 'configurar'):
			addDir(nome,link,5,'Lista',logo,tipo,fanart)
		elif tipo == 'tvarchive':
			addDir(nome,link,6,'Lista',logo,'',fanart)
		elif(tipo == 'limparcache'):
			addDir(nome, link, 13, 'Lista',logo,tipo,fanart)
		elif(tipo == 'limpartudo'):
			addDir(nome, link, 14, 'Lista',logo,tipo,fanart)
		
	xbmc.executebuiltin('Notification(%s, %s, %i, %s)'%(AddonTitle,_nomeuser, 8000, _ICON_))
	xbmcplugin.endOfDirectory(int(sys.argv[1]),cacheToDisc=False)

def abrirExtras():
	urlnoo1 = __ADDON__.getSetting("acess_Token")+'PHP/liveit/buscarradios.php?client_secret='+__ADDON__.getSetting("client_secret_user")+'&addon=1'
	addDir("Rádios",urlnoo1,102,'Lista',__ADDON__.getSetting("acess_Token")+"Addon/Imagens/radios.png",'praias',__ADDON__.getSetting("acess_Token")+"Addon/Imagens/radios_fanart.png")
	urlnoo1 = __ADDON__.getSetting("acess_Token")+'PHP/liveit/buscarpraias.php?client_secret='+__ADDON__.getSetting("client_secret_user")+'&addon=1'
	addDir("Praias",urlnoo1,101,'Lista',__ADDON__.getSetting("acess_Token")+"Addon/Imagens/novidadestv.png",'praias',__ADDON__.getSetting("acess_Token")+"Addon/Imagens/novidades_fanart.png")
	urlnoo1 = __ADDON__.getSetting("acess_Token")+'PHP/liveit/buscarnewtelenovelas.php?tipo=Programas&client_secret='+__ADDON__.getSetting("client_secret_user")+'&addon=1'
	addDir("Programas e Telenovelas",urlnoo1,103,'Lista',__ADDON__.getSetting("acess_Token")+"Addon/Imagens/novidadestv.png",'praias',__ADDON__.getSetting("acess_Token")+"Addon/Imagens/novidades_fanart.png")
	urlnoo1 = __ADDON__.getSetting("acess_Token")+'PHP/liveit/buscarnewtelenovelas.php?tipo=Jornais&client_secret='+__ADDON__.getSetting("client_secret_user")+'&addon=1'
	addDir("Jornais",urlnoo1,107,'Lista',__ADDON__.getSetting("acess_Token")+"Addon/Imagens/novidadestv.png",'jornais',__ADDON__.getSetting("acess_Token")+"Addon/Imagens/novidades_fanart.png")
	
	vista_menu()

def listar_grupos1(modon,url,fanart):
	resultado1 = devolveresultado(url)
	resultado = json.loads(resultado1)
	for i in resultado['canais']:
		id = i['ID']
		nome = ""
		imagem = ""
		urln = ""
		try: nome = base64.b64decode(i['Nome']).decode('utf-8')
		except: pass
		try: 
			imagem = base64.b64decode(i['Imagem']).decode('utf-8')
			imagem = __ADDON__.getSetting("acess_Token")+"Logos/"+imagem
		except: pass
		try: urln = base64.b64decode(i['Url']).decode('utf-8')
		except: pass
		addLinkCanalLista(nome,urln,imagem,'',fanart, '0001')
		
def listar_grupos2(modon,url,fanart):
	resultado1 = devolveresultado(url)
	resultado = json.loads(resultado1)
	for i in resultado['canais']:
		id = i['ID']
		nome = ""
		imagem = ""
		urln = ""
		try: nome = base64.b64decode(i['Nome']).decode('utf-8')
		except: pass
		try: 
			imagem = base64.b64decode(i['Imagem']).decode('utf-8')
			imagem = __ADDON__.getSetting("acess_Token")+"Logos/"+imagem
		except: pass
		try: urln = base64.b64decode(i['Url']).decode('utf-8')
		except: pass
		addLinkCanalLista(nome,urln,imagem,'',fanart, '0001')
	
def listar_grupos3(modon,url,fanart):
	resultado1 = devolveresultado(url)
	resultado = json.loads(resultado1)
	for i in resultado['canais']:
		nome = ""
		imagem = ""
		urln = ""
		tipo = ""
		website = ""
		canal = ""
		try: nome = base64.b64decode(i['Nome']).decode('utf-8')
		except: pass
		try: 
			imagem = base64.b64decode(i['Imagem']).decode('utf-8')
			imagem = __ADDON__.getSetting("acess_Token")+"Logos/"+imagem
		except: pass
		try: urln = base64.b64decode(i['Url']).decode('utf-8')
		except: pass
		try: website = base64.b64decode(i['WebSite']).decode('utf-8')
		except: pass
		try: tipo = i['Tipo']
		except: pass
		try: canal = i['Canal']
		except: pass
		urlnoo3 = __ADDON__.getSetting("acess_Token")+'PHP/liveit/buscarinfotelenovelas.php?tipo='+tipo+'&website='+website+'&url='+urln+'&client_secret='+__ADDON__.getSetting("client_secret_user")+'&addon=1'
		addDir(nome,urlnoo3,104,'Lista',imagem,'Programas',__ADDON__.getSetting("acess_Token")+"Addon/Imagens/novidades_fanart.png")

def listar_grupos4(modon,url,iconimage,fanart):
	resultado1 = devolveresultado(url)
	resultado = json.loads(resultado1)
	for i in resultado['episodios']:
		nome = ""
		urln = i['url']
		try: nome = base64.b64decode(i['titulo']).decode('utf-8')
		except: pass
		addLinkCanalLista(nome,urln,iconimage,'programas',fanart, '0001')
		
def listar_grupos5(modon,url,fanart):
	resultado1 = devolveresultado(url)
	resultado = json.loads(resultado1)
	for i in resultado['canais']:
		nome = ""
		imagem = ""
		urln = ""
		tipo = ""
		website = ""
		canal = ""
		try: nome = base64.b64decode(i['Nome']).decode('utf-8')
		except: pass
		try: 
			imagem = base64.b64decode(i['Imagem']).decode('utf-8')
			imagem = __ADDON__.getSetting("acess_Token")+"Logos/"+imagem
		except: pass
		try: urln = base64.b64decode(i['Url']).decode('utf-8')
		except: pass
		try: website = base64.b64decode(i['WebSite']).decode('utf-8')
		except: pass
		try: tipo = i['Tipo']
		except: pass
		try: canal = i['Canal']
		except: pass
		urlnoo3 = __ADDON__.getSetting("acess_Token")+'PHP/liveit/buscarinfotelenovelas.php?tipo=jornais&url='+urln+'&client_secret='+__ADDON__.getSetting("client_secret_user")+'&addon=1'
		addDir(nome,urlnoo3,108,'Lista',imagem,'Jornais',__ADDON__.getSetting("acess_Token")+"Addon/Imagens/novidades_fanart.png")

def listar_grupos6(modon,url,iconimage,fanart):
	resultado1 = devolveresultado(url)
	resultado = json.loads(resultado1)
	for i in resultado['episodios']:
		nome = ""
		urln = ""
		try: nome = base64.b64decode(i['titulo']).decode('utf-8')
		except: pass
		try: urln = base64.b64decode(i['url']).decode('utf-8')
		except: pass
		
		addDir(nome,urln,109,'Lista',iconimage,'Programas',fanart)
	xbmc.executebuiltin("Container.SetViewMode(55)")

def play_mult_canal2(arg, icon, nome):
	xbmc.executebuiltin('ShowPicture("{0}")'.format(arg))

def abrirVideoClube(url):
	check_login2 = loginpainel()
	filmes_app = check_login2['user']['Filmes_app'];
	filmilink = url+'enigma2.php?username='+__ADDON__.getSetting("login_name")+'&password='+__ADDON__.getSetting("login_password")+'&type=get_vod_categories'
	if filmes_app == 0 or filmes_app == '0':
		database = Database.criarFicheiros()
		addDir('Filmes da Lista',filmilink,4,'Miniatura',os.path.join(__ART_FOLDER__, __SKIN__, 'filmes.png'),'',os.path.join(__ART_FOLDER__, __SKIN__, 'fundo___ADDON__.png'))
		addDir('Filmes do Addon',url,21,'Miniatura',os.path.join(__ART_FOLDER__, __SKIN__, 'filmes.png'),'',os.path.join(__ART_FOLDER__, __SKIN__, 'fundo___ADDON__.png'))
		addDir('Séries do Addon',url,20,'Miniatura',os.path.join(__ART_FOLDER__, __SKIN__, 'series.png'),'',os.path.join(__ART_FOLDER__, __SKIN__, 'fundo___ADDON__.png'))
		addDir('Animes do Addon',url,24,'Miniatura',os.path.join(__ART_FOLDER__, __SKIN__, 'anime.png'),'',os.path.join(__ART_FOLDER__, __SKIN__, 'fundo___ADDON__.png'))
		addDir('[COLOR pink][B]Pesquisa[/B][/COLOR]',__API_SITE__,120,'Lista',os.path.join(__ART_FOLDER__, __SKIN__, 'pesquisa.png'),'',os.path.join(__ART_FOLDER__, __SKIN__, 'fundo___ADDON__.png'))
	elif filmes_app == 1 or filmes_app == '1':
		addDir('Filmes da Lista',filmilink,4,'Miniatura',os.path.join(__ART_FOLDER__, __SKIN__, 'filmes.png'),'',os.path.join(__ART_FOLDER__, __SKIN__, 'fundo___ADDON__.png'))		
	elif filmes_app == 2 or filmes_app == '2':
		addDir('Filmes da Lista',filmilink,4,'Miniatura',os.path.join(__ART_FOLDER__, __SKIN__, 'filmes.png'),'',os.path.join(__ART_FOLDER__, __SKIN__, 'fundo___ADDON__.png'))
		addDir('Filmes do Addon',url,71,'Miniatura',os.path.join(__ART_FOLDER__, __SKIN__, 'filmes.png'),'',os.path.join(__ART_FOLDER__, __SKIN__, 'fundo___ADDON__.png'))
		addDir('Séries do Addon',url,60,'Miniatura',os.path.join(__ART_FOLDER__, __SKIN__, 'series.png'),'',os.path.join(__ART_FOLDER__, __SKIN__, 'fundo___ADDON__.png'))
		addDir('[COLOR pink][B]Pesquisa[/B][/COLOR]',url,160,'Lista',os.path.join(__ART_FOLDER__, __SKIN__, 'pesquisa.png'),'',os.path.join(__ART_FOLDER__, __SKIN__, 'fundo___ADDON__.png'))
	elif filmes_app == 4 or filmes_app == '4':
		addDir('Filmes da Lista',filmilink,4,'Miniatura',os.path.join(__ART_FOLDER__, __SKIN__, 'filmes.png'),'',os.path.join(__ART_FOLDER__, __SKIN__, 'fundo___ADDON__.png'))
		addDir('Filmes do Addon',url,21111,'Miniatura',os.path.join(__ART_FOLDER__, __SKIN__, 'filmes.png'),'',os.path.join(__ART_FOLDER__, __SKIN__, 'fundo___ADDON__.png'))
		addDir('Séries do Addon',url,21112,'Miniatura',os.path.join(__ART_FOLDER__, __SKIN__, 'series.png'),'',os.path.join(__ART_FOLDER__, __SKIN__, 'fundo___ADDON__.png'))
	else:
		addDir('Filmes da Lista',filmilink,4,'Miniatura',os.path.join(__ART_FOLDER__, __SKIN__, 'filmes.png'),'',os.path.join(__ART_FOLDER__, __SKIN__, 'fundo___ADDON__.png'))		

###################################################################################
#							  Abrir Info Conta									  #
###################################################################################

def Abrir_Conta(url):
	andmelink = url+'player_api.php?username='+__ADDON__.getSetting("login_name")+'&password='+__ADDON__.getSetting("login_password")
	execute_ainfo(andmelink)

###############################################################################################################
#													Abrir Info TVS											 #
###############################################################################################################

def abrim3u(url):
	version = __ADDONVERSION__
	kasutajanimi=__ADDON__.getSetting("login_name")
	salasona=__ADDON__.getSetting("login_password")
	lehekylg=url
	vanemakood=__ADDON__.getSetting("login_adultos")
	vanemalukk=__ADDON__.getSetting("login_adultos_sim")
	
	televisioonilink = url+'/enigma2.php?username='+__ADDON__.getSetting("login_name")+'&password='+__ADDON__.getSetting("login_password")+'&type=get_live_categories'
	security_check(televisioonilink)

def security_check(url):
	u = urllib2.Request(url,'')
	u.add_header('Accept', 'application/xml')
	u.add_header('User-agent', 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.0.3) Gecko/2008092417 Firefox/3.0.3')
	response = urllib2.urlopen(u)
	tree = ET.parse(response)
	rootElem = tree.getroot()
	for channel in tree.findall("channel"):
		kanalinimi = channel.find("title").text
		kanalinimi = base64.b64decode(kanalinimi)
		kategoorialink = channel.find("playlist_url").text
		
		addDir(kanalinimi,kategoorialink,8,'Miniatura',os.path.join(__ART_FOLDER__, __SKIN__, 'ico_tv.png'),'',os.path.join(__ART_FOLDER__, __SKIN__, 'fundo_tv.png'))
	
	vista_Grupos()

def detect_modification(url):
	filmilink = url+'/enigma2.php?username='+__ADDON__.getSetting("login_name")+'&password='+__ADDON__.getSetting("login_password")+'&type=get_vod_categories'
	u = urllib2.Request(filmilink,'')
	u.add_header('Accept', 'application/xml')
	u.add_header('User-agent', 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.0.3) Gecko/2008092417 Firefox/3.0.3')
	response = urllib2.urlopen(u)
	tree = ET.parse(response)
	rootElem = tree.getroot()
	for channel in tree.findall("channel"):
		filminimi = channel.find("title").text
		filminimi = base64.b64decode(filminimi)
		kategoorialink = channel.find("playlist_url").text
		
		addDir(filminimi,kategoorialink,9,'Miniatura',os.path.join(__ART_FOLDER__, __SKIN__, 'ico_vid.png'),'',os.path.join(__ART_FOLDER__, __SKIN__, 'fundo_vid.png'))
	
	vista_Grupos()

def stream_video(name,url,image):
	vanemalukk=__ADDON__.getSetting("login_adultos_sim")
	if vanemalukk == "true":
		vanema_lukk(name)
	u = urllib2.Request(url,'')
	u.add_header('Accept', 'application/xml')
	u.add_header('User-agent', 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.0.3) Gecko/2008092417 Firefox/3.0.3')
	response = urllib2.urlopen(u)
	tree = ET.parse(response)
	rootElem = tree.getroot()
	for channel in tree.findall(sync_data("Y2hhbm5lbA==")):
		kanalinimi = channel.find(get_live("dGl0bGU=")).text
		kanalinimi = base64.b64decode(kanalinimi)
		kanalinimi = kanalinimi.partition("[")
		striimilink = channel.find(get_live("c3RyZWFtX3VybA==")).text
		
		urlchama = striimilink.split('/')
		urlnoo = ''
		try:
			urlnoo = urlchama[5]
			urlnoo = urlnoo.replace('ts','')
			urlnoo = urlnoo.replace('m3u8','')
		except:
			pass
		
		pilt = channel.find("desc_image").text
		kava = kanalinimi[1]+kanalinimi[2]
		kava = kava.partition("]")
		kava = kava[2]
		kava = kava.partition("	")
		kava = kava[2]
		shou = get_live("W0NPTE9SIHdoaXRlXSVzIFsvQ09MT1Jd")%(kanalinimi[0])+kava
		kirjeldus = channel.find("description").text
		if kirjeldus:
			kirjeldus = base64.b64decode(kirjeldus)
			nyyd = kirjeldus.partition("(")
			nyyd = "Agora: "+nyyd[0]
			jargmine = kirjeldus.partition(")\n")
			jargmine = jargmine[2].partition("(")
			jargmine = "A seguir: "+jargmine[0]
			kokku = nyyd+jargmine
		else:
			kokku = ""
		if pilt:
			addLinkCanalLista(shou,striimilink,pilt,kokku,os.path.join(__ART_FOLDER__, __SKIN__, 'fundo_tv.png'), urlnoo)
		else:
			addLinkCanalLista(shou,striimilink,os.path.join(__ART_FOLDER__, __SKIN__, 'ico_tv.png'),kokku,os.path.join(__ART_FOLDER__, __SKIN__, 'fundo_tv.png'), urlnoo)
	
	xbmcplugin.setContent(int(sys.argv[1]) ,"episodes")
	vista_Canais()

def get_myaccount(name,url,image):
	vanemalukk=__ADDON__.getSetting("login_adultos_sim")
	if vanemalukk == "true":
		vanema_lukk(name)
	u = urllib2.Request(url,'')
	u.add_header('Accept', 'application/xml')
	u.add_header('User-agent', 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.0.3) Gecko/2008092417 Firefox/3.0.3')
	response = urllib2.urlopen(u)
	tree = ET.parse(response)
	rootElem = tree.getroot()
	for channel in tree.findall("channel"):
		pealkiri = channel.find("title").text
		pealkiri = base64.b64decode(pealkiri)
		pealkiri = pealkiri.encode("utf-8")
		striimilink = channel.find("stream_url").text
		
		urlchama = striimilink.split('/')
		urlnoo = ''
		try:
			urlnoo = urlchama[5]
			urlnoo = urlnoo.replace('ts','')
			urlnoo = urlnoo.replace('m3u8','')
		except:
			pass
		
		pilt = channel.find("desc_image").text 
		descript = channel.find("description").text
		if descript:
			descript = base64.b64decode(descript)
		if pilt:
			addLinkCanalLista(pealkiri,striimilink,pilt,descript,os.path.join(__ART_FOLDER__, __SKIN__, 'fundo_vid.png'), urlnoo)
		else:
			addLinkCanalLista(pealkiri,striimilink,os.path.join(__ART_FOLDER__, __SKIN__, 'ico_tv.png'),descript,os.path.join(__ART_FOLDER__, __SKIN__, 'fundo_vid.png'), urlnoo)
	
	xbmcplugin.setContent(int(sys.argv[1]) ,"movies")
	vista_Canais()

def addLinkCanalLista(title, url, thumbnail, plot, fanart, idcanal, isPlayable=True, folder=False):
	ok=True
	cm=[]
	#if(idcanal != '0001'):
	#	cm.append(('Ver programação', 'XBMC.RunPlugin(%s?mode=31&name=%s&url=%s&iconimage=%s&idCanal=%s&idffCanal=%s)'%(sys.argv[0],urllib.quote_plus(title), urllib.quote_plus(url), urllib.quote_plus(thumbnail), idcanal, '')))
	
	listitem=xbmcgui.ListItem(title,iconImage=thumbnail,thumbnailImage=thumbnail)
	listitem.addContextMenuItems(cm, replaceItems=False)
	info_labels={"Title":title,"FileName":title,"Plot":plot}
	listitem.setInfo( "video", info_labels )
	listitem.setProperty('fanart_image', fanart)
	listitem.setArt({'fanart': fanart})
	listitem.setProperty("Video","true")
	u = sys.argv[0] + "?url=" + str(url) + "&mode=10&name=" + str(name) + "&iconimage="+str(iconimage)+"&fanart="+str(fanart)+"&plot="+str(plot)
	ok=xbmcplugin.addDirectoryItem(handle=int(sys.argv[1]),url=u,listitem=listitem,isFolder=folder)
	return ok

def run_cronjob(title,url,image,plot,fanart):
	vanemalukk=__ADDON__.getSetting("login_adultos_sim")
	if vanemalukk == "true":
		vanema_lukk(name)
	
	if plot == 'programas':
		urln = ""
		try: urln = base64.b64decode(url).decode('utf-8')
		except: pass
		urlchama = urln.split(';;;')
		urlnoo = __ADDON__.getSetting("acess_Token")+'PHP/liveit/searchurl.php?canal='+urlchama[0]+'&url='+urlchama[1]+'&client_secret='+__ADDON__.getSetting("client_secret_user")+'&addon=1'
		
		mensagemprogresso = xbmcgui.DialogProgress()
		mensagemprogresso.create(AddonTitle, u'Abrir emissão','Por favor aguarde...')
		mensagemprogresso.update(25, "", u'Obter video', "")
		resultado1 = devolveresultado(urlnoo)
		mensagemprogresso.update(50, "", u'Prepara-te, vai começar!', "")
		resultado = json.loads(resultado1)
		mensagemprogresso.update(75, "", u'Boa Sessão!!!', "")
		urln = ""
		for i in resultado['informacao']:
			try: urln = base64.b64decode(i['url']).decode('utf-8')
			except: pass
			
		mensagemprogresso.close()
		xbmc.sleep(5000)
		playlist = xbmc.PlayList(xbmc.PLAYLIST_VIDEO)
		playlist.clear()
		info_labels={"Title":title,"FileName":title,"Plot":plot}
		listitem=xbmcgui.ListItem(title,iconImage=image,thumbnailImage=image)
		listitem.setInfo( "video", info_labels )
		playlist.add(url=urln, listitem=listitem, index=1)
		xbmc.Player().play(playlist)
	else:
		playlist = xbmc.PlayList(xbmc.PLAYLIST_VIDEO)
		playlist.clear()
		info_labels={"Title":title,"FileName":title,"Plot":plot}
		listitem=xbmcgui.ListItem(title,iconImage=image,thumbnailImage=image)
		listitem.setInfo( "video", info_labels )
		playlist.add(url=url, listitem=listitem, index=1)
		xbmc.Player().play(playlist)
	

def sync_data(channel):
	video = base64.b64decode(channel)
	return video

def restart_service(params):
	vanemalukk=__ADDON__.getSetting("login_adultos_sim")
	if vanemalukk == "true":
		pealkiri = params.get(sync_data("dGl0bGU="))
		vanema_lukk(pealkiri)
	lopplink = params.get(vod_channels("dXJs"))
	
	xbmcplugin.setResolvedUrl(int(sys.argv[1]), True, listitem)

def grab_epg(url):
	req = urllib2.Request(url)
	req.add_header(sync_data("VXNlci1BZ2VudA==") , vod_channels("S29kaSBwbHVnaW4gYnkgTGl2ZSF0"))
	response = urllib2.urlopen(req)
	link=response.read()
	jdata = json.loads(link.decode('utf8'))
	response.close()
	if jdata:
		return jdata

def grab_epg2(url):
	req = urllib2.Request(url)
	req.add_header('User-agent', 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.0.3) Gecko/2008092417 Firefox/3.0.3')
	req.add_header(sync_data("VXNlci1BZ2VudA==") , vod_channels("S29kaSBwbHVnaW4gYnkgTGl2ZSF0"))
	response = urllib2.urlopen(req)
	link=response.read()
	if link != '{"user_info":{"auth":0}}':
		jdata = json.loads(link.decode('utf8'))
		response.close()
		if jdata:
			return jdata
	else:
		return None
	
def kontroll(url):
	randomstring = grab_epg(url)
	kasutajainfo = randomstring[sync_data("dXNlcl9pbmZv")]
	kontroll = kasutajainfo[get_live("YXV0aA==")]
	return kontroll
def get_live(channel):
	video = base64.b64decode(channel)
	return video
def execute_ainfo(url):
	andmed = grab_epg(url)
	kasutajaAndmed = andmed[sync_data("dXNlcl9pbmZv")]
	seis = kasutajaAndmed[get_live("c3RhdHVz")]
	aegub = kasutajaAndmed[sync_data("ZXhwX2RhdGU=")]
	if aegub:
		aegub = datetime.datetime.fromtimestamp(int(aegub)).strftime('%H:%M %d.%m.%Y')
	else:
		aegub = vod_channels("TmV2ZXI=") 
	rabbits = kasutajaAndmed[vod_channels("aXNfdHJpYWw=")]
	if rabbits == "0":
		rabbits = sync_data("Tm8=")
	else:
		rabbits = sync_data("WWVz")
	leavemealone = kasutajaAndmed[get_live("bWF4X2Nvbm5lY3Rpb25z")]
	polarbears = kasutajaAndmed[sync_data("dXNlcm5hbWU=")]
	
	addLinkCanalLista("[COLOR = white]Utilizador: [/COLOR]"+polarbears,"","",os.path.join(__ART_FOLDER__, __SKIN__, 'ico_con.png'),os.path.join(__ART_FOLDER__, __SKIN__, 'fundo_con.png'),'')
	
	addLinkCanalLista("[COLOR = white]Estado: [/COLOR]"+seis,"","",os.path.join(__ART_FOLDER__, __SKIN__, 'ico_con.png'),os.path.join(__ART_FOLDER__, __SKIN__, 'fundo_con.png'),'')
	
	addLinkCanalLista("[COLOR = white]Expira: [/COLOR]"+aegub,"","",os.path.join(__ART_FOLDER__, __SKIN__, 'ico_con.png'),os.path.join(__ART_FOLDER__, __SKIN__, 'fundo_con.png'),'')
	
	addLinkCanalLista("[COLOR = white]Conta de Teste: [/COLOR]"+rabbits,"","",os.path.join(__ART_FOLDER__, __SKIN__, 'ico_con.png'),os.path.join(__ART_FOLDER__, __SKIN__, 'fundo_con.png'),'')
	
	addLinkCanalLista("[COLOR = white]Maximo de Connec: [/COLOR]"+leavemealone,"","",os.path.join(__ART_FOLDER__, __SKIN__, 'ico_con.png'),os.path.join(__ART_FOLDER__, __SKIN__, 'fundo_con.png'),'')
	
	vista_Grupos()

def vanema_lukk(name):
	a = 'XXX', 'Adult', 'Adults','ADULT','ADULTS','adult','adults','Porn','PORN','porn','Porn','xxx'
	if any(s in name for s in a):
		xbmc.executebuiltin((u'XBMC.Notification("Controlo Parental", "O canal contem conteudo adulto", 2000)'))
		text = plugintools.keyboard_input(default_text="", title="Codigo para controlo parental")
		if text==plugintools.get_setting(sync_data("bG9naW5fYWR1bHRvcw==")):
		  return
		else:
		  exit()
	else:
		name = ""

def DownloaderClass(url,dest):
	dp = xbmcgui.DialogProgress()
	dp.create(sync_data("R2V0dGluZyB1cGRhdGU="),get_live("RG93bmxvYWRpbmc="))
	urllib.urlretrieve(url,dest,lambda nb, bs, fs, url=url: _pbhook(nb,bs,fs,url,dp))

def _pbhook(numblocks, blocksize, filesize, url=None,dp=None):
	try:
		percent = min((numblocks*blocksize*100)/filesize, 100)
		__ALERTA__(AddonTitle, ''+percent)
		dp.update(percent)
	except:
		percent = 100
		dp.update(percent)
	if dp.iscanceled():
		__ALERTA__(AddonTitle, 'O download foi cancelado.')
		dp.close()

def vod_channels(channel):
	video = base64.b64decode(channel)
	return video

def PlayUrl(name, url, iconimage=None):
	listitem = xbmcgui.ListItem(path=url, thumbnailImage=iconimage)
	listitem.setInfo(type="Video", infoLabels={ "Title": name })
	xbmcplugin.setResolvedUrl(int(sys.argv[1]), True, listitem)

###############################################################################################################
#													Menu TV Arquivo											 #
###############################################################################################################

def listatvarchive(url):
	endereco = url+"player_api.php?username="+__ADDON__.getSetting('login_name')+"&password="+__ADDON__.getSetting('login_password')+"&action=get_live_streams"
	#iIiIIIi = urllib2.urlopen(endereco)
	#ooo00OOOooO	= json.load(iIiIIIi)
	req = urllib2.Request(endereco)
	req.add_header(sync_data("VXNlci1BZ2VudA==") , vod_channels("S29kaSBwbHVnaW4gYnkgTGl2ZSF0"))
	response = urllib2.urlopen(req)
	link=response.read()
	ooo00OOOooO	= json.loads(link.decode('utf8'))
	response.close()
	O00OOOoOoo0O = ooo00OOOooO['available_channels']
	for	O000OOo00oo	in	O00OOOoOoo0O.values():
		oo0OOo = O000OOo00oo['tv_archive']
		if(oo0OOo == 1):
			nametv=O000OOo00oo['name']
			stream_id=O000OOo00oo['stream_id']
			logo_tv=O000OOo00oo['stream_icon']
			duration = O000OOo00oo['tv_archive_duration']
			
			addLinkGrupo(nametv,logo_tv,stream_id,url,duration,os.path.join(__ART_FOLDER__, __SKIN__, 'fundo_tv_arc.png'),1)
	
	vista_Grupos()

def listatvarchivecanais(name,stream_id,url,duration,iconimage,fanart):
	endereco = url+"player_api.php?username="+__ADDON__.getSetting('login_name')+"&password="+__ADDON__.getSetting('login_password')+"&action=get_epg&stream_id="+stream_id
	#iIiIIIi = urllib2.urlopen(endereco)
	#iiiI11	= json.load(iIiIIIi)
	req = urllib2.Request(endereco)
	req.add_header(sync_data("VXNlci1BZ2VudA==") , vod_channels("S29kaSBwbHVnaW4gYnkgTGl2ZSF0"))
	response = urllib2.urlopen(req)
	link=response.read()
	iiiI11	= json.loads(link.decode('utf8'))
	response.close()
	
	iiIiI = datetime.datetime.utcnow() - datetime.timedelta(days=int(duration))
	o00oooO0Oo	=calendar.timegm(iiIiI.timetuple())
	o00oooO0Oo	=int(o00oooO0Oo)
	o0O0OOO0Ooo	=time.time()
	o0O0OOO0Ooo	=int(o0O0OOO0Ooo)
	
	for	iiIiII1	in	iiiI11	:
		title_tv = iiIiII1['title']
		title_tv=base64.b64decode(title_tv)
		start	= int(iiIiII1['start'])
		end	= int(iiIiII1['end'])
		segundo = 0.0166666667
		
		duracao = int((end-start)*segundo)
		
		if(start > o00oooO0Oo and start < o0O0OOO0Ooo):
			if 90 - 90:	Ooo0	%	Oo0ooO0oo0oO	/	Oo0oO0ooo
			IIi = datetime.datetime.fromtimestamp(int(start)).strftime('%d.%m %H:%M')
			i1Iii1i1I = datetime.datetime.fromtimestamp(int(start)).strftime('%Y-%m-%d:%H:%M')
			title_tv = IIi + " " + title_tv
			endereco = url+"streaming/timeshift.php?username="+__ADDON__.getSetting('login_name')+"&password="+__ADDON__.getSetting('login_password')+"&stream="+stream_id+"&start="+i1Iii1i1I+"&duration="+str(duracao)
			
			addLinkCanal(title_tv,endereco,iconimage,'0001','')
	
	vista_Canais()

def addLinkGrupo(title,thumbnail,stream_id,url,duration,fanart,type):
	ok=True
	
	listitem=xbmcgui.ListItem(title,iconImage=thumbnail,thumbnailImage=thumbnail)
	info_labels={"Title":title,"FileName":title}
	listitem.setInfo( "video", info_labels )
	listitem.setProperty('fanart_image',fanart)
	xbmcplugin.setPluginFanart(int(sys.argv[1]),fanart)
	
	u = sys.argv[0] + "?url=" + str(url) + "&mode=7&name=" + str(title) + "&iconimage="+str(thumbnail)+"&fanart="+str(fanart)+"&stream_id="+str(stream_id)+"&duration="+duration
	
	ok=xbmcplugin.addDirectoryItem(handle=int(sys.argv[1]),url=u,listitem=listitem,isFolder=True)
	
	return ok

###############################################################################################################
#													Abrir Setting										 #
###############################################################################################################

def abrirDefinincoes():
	__ADDON__.openSettings()
	vista_menu()

################################
###		Clear Cache		###
################################

def CLEARCACHE():
	xbmc_cache_path = os.path.join(xbmc.translatePath('special://home'), 'cache')
	if os.path.exists(xbmc_cache_path)==True:	
		for root, dirs, files in os.walk(xbmc_cache_path):
			file_count = 0
			file_count += len(files)
			if file_count > 0:
	
				dialog = xbmcgui.Dialog()
				if dialog.yesno("Apagar Cache no XBMC.", str(file_count) + " ficheiros encontrados.", "Quer apagar todos os ficheiros em cache?"):
				
					for f in files:
						try:
							os.unlink(os.path.join(root, f))
						except:
							pass
					for d in dirs:
						try:
							shutil.rmtree(os.path.join(root, d))
						except:
							pass
						
			else:
				pass
	if xbmc.getCondVisibility('system.platform.ATV2'):
		atv2_cache_a = os.path.join('/private/var/mobile/Library/Caches/AppleTV/Video/', 'Other')
		
		for root, dirs, files in os.walk(atv2_cache_a):
			file_count = 0
			file_count += len(files)
		
			if file_count > 0:

				dialog = xbmcgui.Dialog()
				if dialog.yesno("Apagar ficheiros ATV2.", str(file_count) + " ficheiros encontrados em 'Outros'", "Quer apagar todos os ficheiros em cache?"):
				
					for f in files:
						os.unlink(os.path.join(root, f))
					for d in dirs:
						shutil.rmtree(os.path.join(root, d))
						
			else:
				pass
		atv2_cache_b = os.path.join('/private/var/mobile/Library/Caches/AppleTV/Video/', 'LocalAndRental')
		
		for root, dirs, files in os.walk(atv2_cache_b):
			file_count = 0
			file_count += len(files)
		
			if file_count > 0:

				dialog = xbmcgui.Dialog()
				if dialog.yesno("Apagar ficheiros ATV2.", str(file_count) + " ficheiros encontrados em 'Local'", "Quer apagar todos os ficheiros em cache?"):
				
					for f in files:
						os.unlink(os.path.join(root, f))
					for d in dirs:
						shutil.rmtree(os.path.join(root, d))
						
			else:
				pass
			  # Set path to Cydia Archives cache files
							 

	# Set path to What th Furk cache files
	wtf_cache_path = os.path.join(xbmc.translatePath('special://profile/addon_data/plugin.video.whatthefurk/cache'), '')
	if os.path.exists(wtf_cache_path)==True:	
		for root, dirs, files in os.walk(wtf_cache_path):
			file_count = 0
			file_count += len(files)
		
		# Count files and give option to delete
			if file_count > 0:
	
				dialog = xbmcgui.Dialog()
				if dialog.yesno("Apagar a cache WTF.", str(file_count) + " ficheiros encontrados.", "Quer apagar todos os ficheiros em cache?"):
				
					for f in files:
						os.unlink(os.path.join(root, f))
					for d in dirs:
						shutil.rmtree(os.path.join(root, d))
						
			else:
				pass
				
				# Set path to 4oD cache files
	channel4_cache_path= os.path.join(xbmc.translatePath('special://profile/addon_data/plugin.video.4od/cache'), '')
	if os.path.exists(channel4_cache_path)==True:	
		for root, dirs, files in os.walk(channel4_cache_path):
			file_count = 0
			file_count += len(files)
		
		# Count files and give option to delete
			if file_count > 0:
	
				dialog = xbmcgui.Dialog()
				if dialog.yesno("Apagar ficheiros 4oD em cache.", str(file_count) + " ficheiros encontrados.", "Quer apagar todos os ficheiros em cache?"):
				
					for f in files:
						os.unlink(os.path.join(root, f))
					for d in dirs:
						shutil.rmtree(os.path.join(root, d))
						
			else:
				pass
				
				# Set path to BBC iPlayer cache files
	iplayer_cache_path= os.path.join(xbmc.translatePath('special://profile/addon_data/plugin.video.iplayer/iplayer_http_cache'), '')
	if os.path.exists(iplayer_cache_path)==True:	
		for root, dirs, files in os.walk(iplayer_cache_path):
			file_count = 0
			file_count += len(files)
		
		# Count files and give option to delete
			if file_count > 0:
	
				dialog = xbmcgui.Dialog()
				if dialog.yesno("Apagar ficheiros BBC iPlayer em cache.", str(file_count) + " ficheiros encontrados.", "Quer apagar todos os ficheiros em cache?"):
				
					for f in files:
						os.unlink(os.path.join(root, f))
					for d in dirs:
						shutil.rmtree(os.path.join(root, d))
						
			else:
				pass
				
				
				# Set path to Simple Downloader cache files
	downloader_cache_path = os.path.join(xbmc.translatePath('special://profile/addon_data/script.module.simple.downloader'), '')
	if os.path.exists(downloader_cache_path)==True:	
		for root, dirs, files in os.walk(downloader_cache_path):
			file_count = 0
			file_count += len(files)
		
		# Count files and give option to delete
			if file_count > 0:
	
				dialog = xbmcgui.Dialog()
				if dialog.yesno("Apagar ficheiros Simple Downloader em cache.", str(file_count) + " ficheiros encontrados.", "Quer apagar todos os ficheiros em cache?"):
				
					for f in files:
						os.unlink(os.path.join(root, f))
					for d in dirs:
						shutil.rmtree(os.path.join(root, d))
						
			else:
				pass
	
	itv_cache_path = os.path.join(xbmc.translatePath('special://profile/addon_data/plugin.video.itv/Images'), '')
	if os.path.exists(itv_cache_path)==True:	
		for root, dirs, files in os.walk(itv_cache_path):
			file_count = 0
			file_count += len(files)
			
			if file_count > 0:
	
				dialog = xbmcgui.Dialog()
				if dialog.yesno("Apagar items em cache", str(file_count) + " ficheiros encontrados.", "Quer apagar todos os ficheiros em cache?"):
				
					for f in files:
						os.unlink(os.path.join(root, f))
					for d in dirs:
						shutil.rmtree(os.path.join(root, d))
						
			else:
				pass
	dialog = xbmcgui.Dialog()
	dialog.ok(AddonTitle, "		Cache apagada com sucesso!")


################################
###	 Purge Packages		###
################################

def PURGEPACKAGES():
	packages_cache_path = xbmc.translatePath(os.path.join('special://home/addons/packages', ''))
	try:	
		for root, dirs, files in os.walk(packages_cache_path):
			file_count = 0
			file_count += len(files)
			
			if file_count > 0:
	
				dialog = xbmcgui.Dialog()
				if dialog.yesno("Excluir informação em Cache.", str(file_count) + " ficheiros encontrados.", "Quer apagar todos os ficheiros?"):
							
					for f in files:
						os.unlink(os.path.join(root, f))
					for d in dirs:
						shutil.rmtree(os.path.join(root, d))
					dialog = xbmcgui.Dialog()
					dialog.ok(AddonTitle, "		Kodi limpo com sucesso.")
				else:
						pass
			else:
				dialog = xbmcgui.Dialog()
				dialog.ok(AddonTitle, "		Não foram encontrados ficheiros a apagar.")
	except: 
		dialog = xbmcgui.Dialog()
		dialog.ok(AddonTitle, "Erro ao tentar apagar ficheiros em cache.")

############################################################################################################
#												Addon LIVEIT Filmes e Series							 #
############################################################################################################
def devolveresultado(urlnoo):
	resultado = abrir_url(urlnoo, header=headers)
	try:
		resultado = resultado.decode('utf-8')
	except:
		resultado = resultado.encode('utf-8')
	return resultado

def getCategorialive(id,inicio):
	cat = ler_ficheiro(os.path.join(__PASTA_DADOS__,'categorias_live.liveit')).replace('"', "'")
	return cat
	
def getSagaslive(id,inicio):
	cat = ler_ficheiro(os.path.join(__PASTA_DADOS__,'sagas_live.liveit')).replace('"', "'")
	return cat

def getAnoslive(id,inicio):
	cat = ler_ficheiro(os.path.join(__PASTA_DADOS__,'anos_live.liveit')).replace('"', "'")
	return cat

def loginlili(inicio):
	resultado = False
	erros = ""
	try:
		urlnoo = __ADDON__.getSetting("acess_Token")+'PHP/liveit/tugaliveit.php?client_secret='+__ADDON__.getSetting("client_secret_user")+'&addon=1&tipo='+inicio
		resultado = devolveresultado(urlnoo)
		escrever_ficheiro(os.path.join(__PASTA_DADOS__,'definicoes_live.liveit'), resultado)
		resultado = json.loads(resultado)
		categorias = resultado['grupos']
		escrever_ficheiro(os.path.join(__PASTA_DADOS__,'categorias_live.liveit'), str(categorias))
		anos = resultado['anos']
		escrever_ficheiro(os.path.join(__PASTA_DADOS__,'anos_live.liveit'), str(anos))
		
		if inicio == 'inicio_filmes':
			sagas = resultado['sagas']
			escrever_ficheiro(os.path.join(__PASTA_DADOS__,'sagas_live.liveit'), str(sagas))
		return True
	except:
		__ALERTA__(AddonTitle, 'Não foi possível abrir a página. Por favor tente novamente.')
		return False

def listamenus_liveit1():
	check_login = loginlili('inicio_filmes')
	if check_login == True:
		menuFilmes2(os.path.join(__ART_FOLDER__, __SKIN__, 'filmes.png'),__SITEAddon__+'Imagens/filmes_fanart.png')
	else:
		__ALERTA__(AddonTitle, 'Erro a fazer login nesta parte. Tente novamente mais tarde.')

def listamenus_liveit2():
	check_login = loginlili('inicio_series')
	if check_login == True:
		menuSeries2(os.path.join(__ART_FOLDER__, __SKIN__, 'series.png'),__SITEAddon__+'Imagens/series_fanart.png')
	else:
		__ALERTA__(AddonTitle, 'Erro a fazer login nesta parte. Tente novamente mais tarde.')

def menuFilmes2(iconimage,fanart):
	addDir2('Todos os Filmes', __ADDON__.getSetting("acess_Token")+'PHP/liveit/tugaliveit.php?client_secret='+__ADDON__.getSetting("client_secret_user")+'&tipo=filmes&genero=todos&addon=1', 11111, 'filmes', iconimage, 1, None, None, fanart)
	addDir2('Todos os Destaques', __ADDON__.getSetting("acess_Token")+'PHP/liveit/tugaliveit.php?client_secret='+__ADDON__.getSetting("client_secret_user")+'&tipo=filmes&genero=destaques&addon=1', 11111, 'filmes', iconimage, 1, None, None, fanart)
	addDir2('Todas as Sagas', __ADDON__.getSetting("acess_Token")+'PHP/liveit/tugaliveit.php?client_secret='+__ADDON__.getSetting("client_secret_user")+'&tipo=filmes&genero=sagas&addon=1', 111199, 'filmes', iconimage, 1, None, None, fanart)
	addDir2('Por Ano', __ADDON__.getSetting("acess_Token")+'PHP/liveit/tugaliveit.php?client_secret='+__ADDON__.getSetting("client_secret_user")+'&tipo=filmes&genero=anos&addon=1', 11118, 'filmes', iconimage, 1, None, None, fanart)
	addDir2('Por Categoria', __ADDON__.getSetting("acess_Token")+'PHP/liveit/tugaliveit.php?client_secret='+__ADDON__.getSetting("client_secret_user")+'&tipo=filmes&genero=categoria&addon=1', 11119, 'filmes', iconimage, 1, None, None, fanart)
	addDir2('Por Rating', __ADDON__.getSetting("acess_Token")+'PHP/liveit/tugaliveit.php?client_secret='+__ADDON__.getSetting("client_secret_user")+'&tipo=filmes&genero=rating&addon=1', 11111, 'filmes', iconimage, 1, None, None, fanart)
	addDir2('Para Crianças', __ADDON__.getSetting("acess_Token")+'PHP/liveit/tugaliveit.php?client_secret='+__ADDON__.getSetting("client_secret_user")+'&tipo=filmes&genero=kids&addon=1', 11111, 'filmes', iconimage, 1, None, None, fanart)
	addDir2('[COLOR pink][B]Pesquisa[/B][/COLOR]', __ADDON__.getSetting("acess_Token")+'PHP/liveit/tugaliveit.php?client_secret='+__ADDON__.getSetting("client_secret_user")+'&tipo=filmes&addon=1', 11120, 'filmes', iconimage, 1, None, None, fanart)
	vista_menu()

def menuSeries2(iconimage,fanart):
	addDir2('Todas Series', __ADDON__.getSetting("acess_Token")+'PHP/liveit/tugaliveit.php?client_secret='+__ADDON__.getSetting("client_secret_user")+'&tipo=series&genero=todos&addon=1', 11112, 'series', iconimage, 1, None, None, fanart)
	addDir2('Todos os Destaques', __ADDON__.getSetting("acess_Token")+'PHP/liveit/tugaliveit.php?client_secret='+__ADDON__.getSetting("client_secret_user")+'&tipo=series&genero=destaques&addon=1', 11112, 'series', iconimage, 1, None, None, fanart)
	addDir2('Por Ano', __ADDON__.getSetting("acess_Token")+'PHP/liveit/tugaliveit.php?client_secret='+__ADDON__.getSetting("client_secret_user")+'&tipo=series&genero=anos&addon=1', 11118, 'series', iconimage, 1, None, None, fanart)
	addDir2('Por Categoria', __ADDON__.getSetting("acess_Token")+'PHP/liveit/tugaliveit.php?client_secret='+__ADDON__.getSetting("client_secret_user")+'&tipo=series&genero=categoria&addon=1', 11119, 'series', iconimage, 1, None, None, fanart)
	addDir2('Por Rating', __ADDON__.getSetting("acess_Token")+'PHP/liveit/tugaliveit.php?client_secret='+__ADDON__.getSetting("client_secret_user")+'&tipo=series&genero=rating&addon=1', 11112, 'series', iconimage, 1, None, None, fanart)
	addDir2('Para Crianças', __ADDON__.getSetting("acess_Token")+'PHP/liveit/tugaliveit.php?client_secret='+__ADDON__.getSetting("client_secret_user")+'&tipo=series&genero=kids&addon=1', 11112, 'series', iconimage, 1, None, None, fanart)
	addDir2('[COLOR pink][B]Pesquisa[/B][/COLOR]', __ADDON__.getSetting("acess_Token")+'PHP/liveit/tugaliveit.php?client_secret='+__ADDON__.getSetting("client_secret_user")+'&tipo=series&addon=1', 11120, 'series', iconimage, 1, None, None, fanart)
	vista_menu()
	
def filmes2(url):
	resultado = devolveresultado(url)
	resultado = json.loads(resultado)
	for i in resultado['item']:
		setFilme2(i)
	
	current = resultado['paginacao']['atual']
	total = 0
	try: total = resultado['paginacao']['total']
	except: pass
	try: proximo = base64.b64decode(resultado['paginacao']['seguinte'])
	except: pass
	if int(current) < int(total):
		addDir2('Próxima página ('+str(current)+'/'+str(total)+')', proximo, 11111, 'filmes', os.path.join(__ART_FOLDER__, __SKIN__, 'proximo.png'),1)
	vista_filmesSeries()
		
def series2(url):
	resultado = devolveresultado(url)
	resultado = json.loads(resultado)
	
	for i in resultado['item']:
		setSeries2(i)
	
	current = resultado['paginacao']['atual']
	total = 0
	try: total = resultado['paginacao']['total']
	except: pass
	try: proximo = base64.b64decode(resultado['paginacao']['seguinte'])
	except: pass
	if int(current) < int(total):
		addDir2('Proxima pagina ('+str(current)+'/'+str(total)+')', proximo, 11112, 'series', os.path.join(__ART_FOLDER__, __SKIN__, 'proximo.png'))
	vista_filmesSeries()
	
	
def setFilme2(i):
	categoria = ""
	try: categoria = base64.b64decode(i['Grupo']).decode('utf-8')
	except: pass
	
	grupo2 = ""
	try: grupo2 = base64.b64decode(i['Grupo2']).decode('utf-8')
	except: pass 
	
	grupo3 = ""
	try: grupo3 = base64.b64decode(i['Grupo3']).decode('utf-8')
	except: pass
	
	if grupo2 != "":
		categoria += ','+grupo2
	if grupo3 != "":
		categoria += ','+grupo3
	
	pt = ''
	br = ''
	semLegenda = ''
	id_video = i['ID']
	
	nome = ''
	try: nome = base64.b64decode(i['Nome']).decode('utf-8')
	except: pass
	
	nomeen = ''
	try: nomeen = base64.b64decode(i['NomeEN']).decode('utf-8')
	except: pass
	
	descricao = ''
	try: descricao = base64.b64decode(i['Descricao']).decode('utf-8')
	except: pass
	
	realizador = ''
	try: realizador = base64.b64decode(i['Realizador']).decode('utf-8')
	except: pass
	
	actores = ''
	try: actores = base64.b64decode(i['Actores']).decode('utf-8')
	except: pass
	
	youtube = ''
	try: youtube = base64.b64decode(i['Youtube']).decode('utf-8')
	except: pass
	
	url1 = ''
	try: url1 = base64.b64decode(i['Url']).decode('utf-8')
	except: pass
	
	url2 = ''
	try: url2 = base64.b64decode(i['Url1']).decode('utf-8')
	except: pass
	
	url3 = ''
	try: url3 = base64.b64decode(i['Url2']).decode('utf-8')
	except: pass
	
	url4 = ''
	try: url4 = base64.b64decode(i['Url3']).decode('utf-8')
	except: pass
	
	imdb = ''
	try: imdb = base64.b64decode(i['Imdb']).decode('utf-8')
	except: pass
	
	imagem = ''
	try: imagem = base64.b64decode(i['Imagem']).decode('utf-8')
	except: pass
	
	legendas = ''
	try: legendas = base64.b64decode(i['Legendas']).decode('utf-8')
	except: pass
	
	anos = i['AnoNovo']
	
	if 'http' not in imagem:
		imagem = __API__+imagem
	
	if legendas == "semlegenda" or i['Legendas'] == "":
		semLegenda = '[COLOR red][B]S/ LEGENDA [/B][/COLOR]'
	if 'Brasileiro' in categoria:
		br = '[B][COLOR green]B[/COLOR][COLOR yellow]R[/COLOR]: [/B]'
	if 'Portu' in categoria:
		pt = '[B][COLOR green]P[/COLOR][COLOR red]T[/COLOR]: [/B]'
	
	visto = False
	cor = 'white'
	if 'PT' in imdb:
		imdb = re.compile('(.+?)PT').findall(imdb)[0]
		pt = '[B][COLOR green]P[/COLOR][COLOR red]T[/COLOR]: [/B]'
	
	infoLabels = {'Title': nomeen, 'Year': anos, 'Genre': categoria, 'Plot': descricao, 'Cast': actores.split(','), 'Trailer': youtube, 'Director': realizador, 'Rating': i['Rating'], 'IMDBNumber': imdb }

	nomeee = '[COLOR '+cor+']'+pt+br+semLegenda+removerAcentos(nome)+' ('+anos+')[/COLOR]'
	urlnoo = __ADDON__.getSetting("acess_Token")+'PHP/liveit/tugaliveit.php?client_secret='+__ADDON__.getSetting("client_secret_user")+'&tipo=filmes&genero=get_video&addon=1&pesquisa='+str(id_video)
	fotooo = imagem
	fanarttt = 'images/background/'+imdb+'.jpg'
	
	addVideo(nomeee, urlnoo, 11113, fotooo, visto, 'filme', 0, 0, infoLabels, fanarttt, trailer=youtube)

def getGeneros2_live(url, modo):
	lista = []
	lista = getSagaslive('inicio_sagas', modo)
	
	for c in ast.literal_eval(lista):
		if c['ID'] == "0":
			continue
		try:
			cat = base64.b64decode(c['Nome']).decode('utf-8')
		except:
			pass
		
		urlnovo = url+'&pesquisa='+str(c['ID']);
		addDir2(cat, urlnovo, 11121, modo, os.path.join(__ART_FOLDER__, __SKIN__, 'genero.png'))
	
	vista_menu()

def getGeneros_live(url, modo):
	lista = []
	if modo == 'filmes':
		lista = getCategorialive('inicio_filmes', modo)
	else:
		lista = getCategorialive('inicio_series', modo)
	
	for c in ast.literal_eval(lista):
		if c['ID'] == "0":
			continue
		try:
			cat = base64.b64decode(c['Nome']).decode('utf-8')
		except:
			pass
		
		urlnovo = url+'&pesquisa='+str(c['ID']);
		addDir2(cat, urlnovo, 11121, modo, os.path.join(__ART_FOLDER__, __SKIN__, 'genero.png'))
	
	vista_menu()

def getYears_live(url, modo):
	lista = []
	if modo == 'filmes':
		lista = getAnoslive('inicio_filmes', modo)
	else:
		lista = getAnoslive('inicio_series', modo)
	
	for c in ast.literal_eval(lista):
		if c['ID'] == "0":
			continue
		try:
			cat = base64.b64decode(c['Nome']).decode('utf-8')
		except:
			pass
		
		urlnovo = url+'&pesquisa='+str(c['ID']);
		addDir2(cat, urlnovo, 11121, modo, os.path.join(__ART_FOLDER__, __SKIN__, 'genero.png'))
	
	vista_menu()
	
def getInfo_live(url, tipo):
	resultado = devolveresultado(url)
	resultado = json.loads(resultado)
	for i in resultado["item"]:
		if tipo == 'filmes':
			setFilme2(i)
		else:
			setSeries2(i)
	
	current = resultado['paginacao']['atual']
	total = 0
	try: total = resultado['paginacao']['total']
	except: pass
	try: proximo = base64.b64decode(resultado['paginacao']['seguinte'])
	except: pass
	if int(current) < int(total):
		addDir2('Proxima pagina ('+str(current)+'/'+str(total)+')', proximo, 11121, tipo, os.path.join(__ART_FOLDER__, __SKIN__, 'proximo.png'))
	vista_filmesSeries()
	
def pesquisa_live(url, tipolo):
	codigo_fonte = ''
	dados = ''
	tabela = ''
	strPesquisa = ''
	ficheiro = ''
	site = ''
	qualidade = ''
	tokenPesquisa= ''
	resultado = ''
	tipolopesquisaNovo = '0'
	if tipolo == 'filmes':
		ficheiro = os.path.join(__PASTA_DADOS__,'filmes_pesquisa.liveit')
		tipo = 0
		qualidade = __Qualidade__
	else:
		ficheiro = os.path.join(__PASTA_DADOS__,'series_pesquisa.liveit')
		tipo = 1
		site = 'series'
	
	if 'page' not in url:
		try:
			tipolopesquisa = xbmcgui.Dialog().select(u'O que pretende pesquisar?', ['Por: NomePT ou Nome EN', 'Por: Realizador','Por: Actor'])
		except:
			return False
		
		if tipolopesquisa == 0:
			tipolopesquisaNovo = '0'
		elif tipo == 1:
			tipolopesquisaNovo = '1'
		elif tipo == 2:
			tipolopesquisaNovo = '2'
			
		__ADDON__.setSetting('tokenPesquisa', tipolopesquisaNovo)
		teclado = xbmc.Keyboard('', 'O que quer pesquisar?')
		teclado.doModal()
		
		if teclado.isConfirmed():
			strPesquisa = teclado.getText()
			if strPesquisa == '':
				__ALERTA__(AddonTitle, 'Insira algo na pesquisa.')
				addDir2('Alterar Pesquisa', url, 11120, tipolo, os.path.join(__ART_FOLDER__, __SKIN__, 'pesquisa.png'), 0)
				return False
			else:
				tokenPesquisa = strPesquisa.replace(" ", "%20")
				__ADDON__.setSetting('tokenPesquisaTexto', tokenPesquisa)
	
	resultado = devolveresultado(url+'&pesquisa='+__ADDON__.getSetting('tokenPesquisaTexto')+'&genero=pesquisa'+__ADDON__.getSetting('tokenPesquisa'))
	resultado = json.loads(resultado)
	for i in resultado["item"]:
		if tipolo == 'filmes':
			setFilme2(i)
		else:
			setSeries2(i)
	
	current = resultado['paginacao']['atual']
	total = 0
	try: total = resultado['paginacao']['total']
	except: pass
	try: proximo = base64.b64decode(resultado['paginacao']['seguinte'])
	except: pass
	if int(current) < int(total):
		addDir2('Proxima pagina ('+str(current)+'/'+str(total)+')', proximo, 11120, tipolo, os.path.join(__ART_FOLDER__, __SKIN__, 'proximo.png'))
	else:
		xbmcplugin.endOfDirectory(int(sys.argv[1]),cacheToDisc=False)
	
	vista_filmesSeries()

def setSeries2(i):
	categoria = ""
	try: categoria = base64.b64decode(i['Grupo']).decode('utf-8')
	except: pass
	
	grupo2 = ""
	try: grupo2 = base64.b64decode(i['Grupo2']).decode('utf-8')
	except: pass 
	
	grupo3 = ""
	try: grupo3 = base64.b64decode(i['Grupo3']).decode('utf-8')
	except: pass
	
	if grupo2 != "":
		categoria += ','+grupo2
	if grupo3 != "":
		categoria += ','+grupo3
	
	id_video = i['ID']
	
	nome = ''
	try: nome = base64.b64decode(i['Nome']).decode('utf-8')
	except: pass
	
	nomeen = ''
	try: nomeen = base64.b64decode(i['NomeEN']).decode('utf-8')
	except: pass
	
	descricao = ''
	try: descricao = base64.b64decode(i['Descricao']).decode('utf-8')
	except: pass
	
	realizador = ''
	try: realizador = base64.b64decode(i['Realizador']).decode('utf-8')
	except: pass
	
	actores = ''
	try: actores = base64.b64decode(i['Actores']).decode('utf-8')
	except: pass
	
	youtube = ''
	try: youtube = base64.b64decode(i['Youtube']).decode('utf-8')
	except: pass
	
	imdb = ''
	try: imdb = base64.b64decode(i['Imdb']).decode('utf-8')
	except: pass
	
	anos = i['AnoNovo']
	temporadas = i['Temporadas']
	
	imagem = ''
	try: imagem = base64.b64decode(i['Imagem']).decode('utf-8')
	except: pass
	
	visto = False
	pt = ''
	br = ''
	semLegenda = ''
	if 'Brasileiro' in categoria:
		br = '[B][COLOR green]B[/COLOR][COLOR yellow]R[/COLOR]: [/B]'
	if 'Portu' in categoria:
		pt = '[B][COLOR green]P[/COLOR][COLOR red]T[/COLOR]: [/B]'
	if 'PT' in imdb:
		pt = '[B][COLOR green]P[/COLOR][COLOR red]T[/COLOR]: [/B]'
	
	if 'http' not in imagem:
		imagem = __API__+imagem
	
	urlnoo = __ADDON__.getSetting("acess_Token")+'PHP/liveit/tugaliveit.php?client_secret='+__ADDON__.getSetting("client_secret_user")+'&tipo=series&genero=temporada&addon=1&serie='+id_video+'&temporada='
	
	infoLabels = {'Title': nomeen, 'Year': anos, 'Genre': categoria, 'Plot': descricao, 'Cast': actores.split(','), 'Trailer': youtube, 'Director': realizador, 'Rating': i['Rating'], 'IMDBNumber': imdb }
	
	nomeee = pt+br+semLegenda+removerAcentos(nome)+' ('+anos+')'
	fotooo = imagem
	fanarttt = __API__+'images/background/'+imdb+'.jpg'
	addDir2(nomeee, urlnoo, 11114, temporadas, fotooo, tipo='serie', infoLabels=infoLabels,poster=fanarttt,visto=visto)
	
	
def getSeasons2(url, modo):
	j=int(modo)
	for i in range(j):
		addDir2("[B]Temporada[/B] "+str(i+1), url+str(i+1), 11115, 'episodios', os.path.join(__ART_FOLDER__, __SKIN__,'temporadas', 'temporada'+str(i+1)+'.png'))
	
	vista_temporadas()

def getEpisodes2(url):
	resultado = devolveresultado(url)
	resultado = json.loads(resultado)
	for i in resultado['item']:
		pt = ''
		br = ''
		final = ''
		semLegenda = ''
		
		visto = False
		cor = 'white'
		
		nome = ''
		try: nome = base64.b64decode(i['Nome']).decode('utf-8')
		except: pass
	
		imdb = ''
		try: imdb = base64.b64decode(i['Imdb']).decode('utf-8')
		except: pass
		
		imagem = ''
		try: imagem = base64.b64decode(i['Imagem']).decode('utf-8')
		except: pass
		
		legendas = ''
		try: legendas = base64.b64decode(i['Legendas']).decode('utf-8')
		except: pass
		
		anos = i['AnoNovo']
	
		if 'http' not in imagem:
			imagem = __API__+imagem
	
		if legendas == "semlegenda" or i['Legendas'] == "":
			semLegenda = '[COLOR red][B]S/ LEGENDA [/B][/COLOR]'
		
		episodio = i['Episodio']
		temporada = i['Temporada']
		id_video = i['ID']
		
		infoLabels = {'Title': nome, 'Code': imdb, 'Episode': episodio, 'Season': temporada }
		nomeee = pt+br+final+semLegenda+'[COLOR '+cor+'][B]Episodio '+str(episodio)+'[/B][/COLOR] '+removerAcentos(nome)
		
		urlnoo = __ADDON__.getSetting("acess_Token")+'PHP/liveit/tugaliveit.php?client_secret='+__ADDON__.getSetting("client_secret_user")+'&tipo=series&genero=get_video&addon=1&pesquisa='+str(id_video)
		fotooo = imagem
		fanarttt = __API__+'images/background/'+imdb+'.jpg'
		addVideo(nomeee, urlnoo, 11113, imagem, visto, 'episodio', temporada, episodio, infoLabels, fanarttt)
	
	vista_episodios()

def player2(name, url, iconimage, modo, temporada, episodio, tipologi):
	resultado = devolveresultado(url)
	resultado = json.loads(resultado)
	infolabels = dict()
	pastaData = ''
	nome = ''
	idVideo = '0'
	mensagemprogresso = xbmcgui.DialogProgress()
	mensagemprogresso.create(AddonTitle, u'Abrir emissão','Por favor aguarde...')
	mensagemprogresso.update(25, "", u'Obter video e legenda', "")

	stream, legenda, ext_g = getStreamLegenda2(resultado[0],tipologi)
	if stream == False and legenda == 204:
		mensagemprogresso.close()
		__ALERTA__(AddonTitle, 'Algum erro. Tente mais tarde')
		return False
	else:
		mensagemprogresso.update(50, "", u'Prepara-te, vai começar!', "")
		playlist = xbmc.PlayList(1)
		playlist.clear()
		listitem = xbmcgui.ListItem(name, iconImage="DefaultVideo.png", thumbnailImage=iconimage)

		listitem.setInfo(type="Video", infoLabels=infolabels)
		listitem.setProperty('mimetype', 'video/x-msvideo')
		listitem.setProperty('IsPlayable', 'true')
		
		listitem.setPath(path=stream)
		playlist.add(stream, listitem)
		xbmcplugin.setResolvedUrl(int(sys.argv[1]), True, listitem)
		mensagemprogresso.update(75, "", u'Boa Sessão!!!', "")

		if stream == False:
			__ALERTA__(AddonTitle, 'O servidor escolhido não disponível, escolha outro ou tente novamente mais tarde.')
		else:
			player_mr = Player.Player(url=url, idFilme=idVideo, pastaData=__PASTA_DADOS__, temporada=temporada, episodio=episodio, nome=name, logo=os.path.join(__ADDON_FOLDER__,'icon.png'))
			mensagemprogresso.close()
			player_mr.play(playlist)
			player_mr.setSubtitles(legenda)
			while player_mr.playing:
				xbmc.sleep(5000)
				#player_mr.trackerTempo()

def getStreamLegenda2(tudoinfo,tipooo):
	resultado = tudoinfo
	i = 0
	servidores = []
	titulos = []
	nome = ''
	url1 = ''
	try: url1 = base64.b64decode(resultado['Url']).decode('utf-8')
	except: pass
	url2 = ''
	try: url2 = base64.b64decode(resultado['Url1']).decode('utf-8')
	except: pass
	url3 = ''
	try: url3 = base64.b64decode(resultado['Url2']).decode('utf-8')
	except: pass
	url4 = ''
	try: url4 = base64.b64decode(resultado['Url3']).decode('utf-8')
	except: pass
	url5 = ''
	try: url5 = base64.b64decode(resultado['Url4']).decode('utf-8')
	except: pass
	
	if url1 != '':
		i+=1
		if 'oload' in url1 or 'openload' in url1:
			nome = "OpenLoad"
			servidores.append(url1)
			titulos.append('Servidor #%s: %s' % (i, nome))
		elif 'vidzi' in url1:
			nome = 'Vidzi'
			servidores.append(url1)
			titulos.append('Servidor #%s: %s' % (i, nome))
		elif 'google' in url1 or 'cloud.mail.ru' in url1 or '.mp4' in url1 or '.avi' in url1:
			nome = AddonTitle
			servidores.append(url1)
			titulos.append('Servidor #%s: %s' % (i, nome))
		elif 'uptostream.com' in url1:
			nome = 'UpToStream'
			servidores.append(url1)
			titulos.append('Servidor #%s: %s' % (i, nome))
		elif 'rapidvideo.com' in url1 or 'raptu' in url1:
			nome = 'Raptu'
			servidores.append(url1)
			titulos.append('Servidor #%s: %s' % (i, nome))
		elif 'vidoza.net' in url1:
			nome = 'Vidoza'
			servidores.append(url1)
			titulos.append('Servidor #%s: %s' % (i, nome))
		elif 'streamango.' in url1:
			nome = 'Streamango'
			servidores.append(url1)
			titulos.append('Servidor #%s: %s' % (i, nome))
		elif 'verystream.' in url1:
			nome = 'VeryStream'
			servidores.append(url1)
			titulos.append('Servidor #%s: %s' % (i, nome))
	if url2 != '':
		i+=1
		if 'oload' in url2 or 'openload' in url2:
			nome = "OpenLoad"
			servidores.append(url2)
			titulos.append('Servidor #%s: %s' % (i, nome))
		elif 'vidzi' in url2:
			nome = 'Vidzi'
			servidores.append(url2)
			titulos.append('Servidor #%s: %s' % (i, nome))
		elif 'google' in url2 or 'cloud.mail.ru' in url2 or '.mp4' in url2 or '.avi' in url2:
			nome = AddonTitle
			servidores.append(url2)
			titulos.append('Servidor #%s: %s' % (i, nome))
		elif 'uptostream.com' in url2:
			nome = 'UpToStream'
			servidores.append(url2)
			titulos.append('Servidor #%s: %s' % (i, nome))
		elif 'rapidvideo.com' in url2 or 'raptu' in url2:
			nome = 'Raptu'
			servidores.append(url2)
			titulos.append('Servidor #%s: %s' % (i, nome))
		elif 'vidoza.net' in url2:
			nome = 'Vidoza'
			servidores.append(url2)
			titulos.append('Servidor #%s: %s' % (i, nome))
		elif 'streamango.' in url2:
			nome = 'Streamango'
			servidores.append(url2)
			titulos.append('Servidor #%s: %s' % (i, nome))
		elif 'verystream.' in url2:
			nome = 'VeryStream'
			servidores.append(url2)
			titulos.append('Servidor #%s: %s' % (i, nome))
			
	try:
		if url3 != '':
			i+=1
			if 'oload' in url3 or 'openload' in url3:
				nome = "OpenLoad"
				servidores.append(url3)
				titulos.append('Servidor #%s: %s' % (i, nome))
			elif 'vidzi' in url3:
				nome = 'Vidzi'
				servidores.append(url3)
				titulos.append('Servidor #%s: %s' % (i, nome))
			elif 'google' in url3 or 'cloud.mail.ru' in url3 or '.mp4' in url3 or '.avi' in url3:
				nome = AddonTitle
				servidores.append(url3)
				titulos.append('Servidor #%s: %s' % (i, nome))
			elif 'uptostream.com' in url3:
				nome = 'UpToStream'
				servidores.append(url3)
				titulos.append('Servidor #%s: %s' % (i, nome))
			elif 'rapidvideo.com' in url3 or 'raptu' in url3:
				nome = 'Raptu'
				servidores.append(url3)
				titulos.append('Servidor #%s: %s' % (i, nome))
			elif 'vidoza.net' in url3:
				nome = 'Vidoza'
				servidores.append(url3)
				titulos.append('Servidor #%s: %s' % (i, nome))
			elif 'streamango.' in url3:
				nome = 'Streamango'
				servidores.append(url3)
				titulos.append('Servidor #%s: %s' % (i, nome))
			elif 'verystream.' in url3:
				nome = 'VeryStream'
				servidores.append(url3)
				titulos.append('Servidor #%s: %s' % (i, nome))
	except:
		pass
	try:
		if url4 != '':
			i+=1
			if 'oload' in url4 or 'openload' in url4:
				nome = "OpenLoad"
				servidores.append(url4)
				titulos.append('Servidor #%s: %s' % (i, nome))
			elif 'vidzi' in url4:
				nome = 'Vidzi'
				servidores.append(url4)
				titulos.append('Servidor #%s: %s' % (i, nome))
			elif 'google' in url4 or 'cloud.mail.ru' in url4 or '.mp4' in url4 or '.avi' in url4:
				nome = AddonTitle
				servidores.append(url4)
				titulos.append('Servidor #%s: %s' % (i, nome))
			elif 'uptostream.com' in url4:
				nome = 'UpToStream'
				servidores.append(url4)
				titulos.append('Servidor #%s: %s' % (i, nome))
			elif 'rapidvideo.com' in url4 or 'raptu' in url4:
				nome = 'Raptu'
				servidores.append(url4)
				titulos.append('Servidor #%s: %s' % (i, nome))
			elif 'vidoza.net' in url4:
				nome = 'Vidoza'
				servidores.append(url4)
				titulos.append('Servidor #%s: %s' % (i, nome))
			elif 'streamango.' in url4:
				nome = 'Streamango'
				servidores.append(url4)
				titulos.append('Servidor #%s: %s' % (i, nome))
			elif 'verystream.' in url4:
				nome = 'VeryStream'
				servidores.append(url4)
				titulos.append('Servidor #%s: %s' % (i, nome))
	except:
		pass
	
	try:
		if url5 != '':
			i+=1
			if 'oload' in url5 or 'openload' in url5:
				nome = "OpenLoad"
				servidores.append(url5)
				titulos.append('Servidor #%s: %s' % (i, nome))
			elif 'vidzi' in url5:
				nome = 'Vidzi'
				servidores.append(url5)
				titulos.append('Servidor #%s: %s' % (i, nome))
			elif 'google' in url5 or 'cloud.mail.ru' in url5 or '.mp4' in url5 or '.avi' in url5:
				nome = AddonTitle
				servidores.append(url5)
				titulos.append('Servidor #%s: %s' % (i, nome))
			elif 'uptostream.com' in url5:
				nome = 'UpToStream'
				servidores.append(url5)
				titulos.append('Servidor #%s: %s' % (i, nome))
			elif 'rapidvideo.com' in url5 or 'raptu' in url5:
				nome = 'Raptu'
				servidores.append(url5)
				titulos.append('Servidor #%s: %s' % (i, nome))
			elif 'vidoza.net' in url5:
				nome = 'Vidoza'
				servidores.append(url5)
				titulos.append('Servidor #%s: %s' % (i, nome))
			elif 'streamango.' in url5:
				nome = 'Streamango'
				servidores.append(url5)
				titulos.append('Servidor #%s: %s' % (i, nome))
			elif 'verystream.' in url5:
				nome = 'VeryStream'
				servidores.append(url5)
				titulos.append('Servidor #%s: %s' % (i, nome))
	except:
		pass
	
	stream = ''
	legenda = ''
	legendanova = ''
	try:
		legendanova = base64.b64decode(resultado['Legendas']).decode('utf-8')
	except:
		pass
	
	if 'liveit' in legendanova:
		legenda = ''
	elif 'http' in legendanova:
		legenda = legendanova
	elif 'subs/' in legendanova:
		legenda = __API__+legendanova
	else:
		legenda = __ADDON__.getSetting("acess_Token")+ "legendas/" +legendanova
	
	ext_g = 'coiso'
	legendaAux = legenda
	servidor = 0
	if len(titulos) > 1:
		servidor = xbmcgui.Dialog().select('Escolha o servidor', titulos)
	else:
		servidor = 0
	
	if 'vidzi' in servidores[servidor]:
		vidzi = URLResolverMedia.Vidzi(servidores[servidor])
		stream = vidzi.getMediaUrl()
		legenda = vidzi.getSubtitle()
	elif 'uptostream.com' in servidores[servidor]:
		stream = URLResolverMedia.UpToStream(servidores[servidor]).getMediaUrl()
	elif 'server.mrpiracy.win' in servidores[servidor]:
		stream = servidores[servidor]
	elif 'oload' in servidores[servidor]:
		stream = URLResolverMedia.OpenLoad(servidores[servidor]).getMediaUrl()
		legenda = URLResolverMedia.OpenLoad(servidores[servidor]).getSubtitle()
		if not '.vtt' in legenda or legenda == '':
			legenda = legendaAux
	elif 'drive.google.com/' in servidores[servidor]:
		stream, ext_g = URLResolverMedia.GoogleVideo(servidores[servidor]).getMediaUrl()
	elif 'cloud.mail.ru' in servidores[servidor]:
		stream, ext_g = URLResolverMedia.CloudMailRu(servidores[servidor]).getMediaUrl()
	elif 'rapidvideo.com' in servidores[servidor] or 'raptu' in servidores[servidor]:
		rapid = URLResolverMedia.RapidVideo(servidores[servidor])
		stream = rapid.getMediaUrl()
		legenda = rapid.getLegenda()
	elif 'vidoza.net' in servidores[servidor]:
		vidoz = URLResolverMedia.Vidoza(servidores[servidor])
		stream = vidoz.getMediaUrl()
		legenda = vidoz.getLegenda()
	elif 'streamango.' in servidores[servidor]:
		streaman = URLResolverMedia.Streamango(servidores[servidor])
		stream = streaman.getMediaUrl()
		legenda = streaman.getLegenda()
	elif 'verystream.' in servidores[servidor]:
		streaman = URLResolverMedia.VeryStream(servidores[servidor])
		stream = streaman.getMediaUrl()
		legenda = streaman.getLegenda()
	else:
		stream = servidores[servidor]
	return stream, legenda, ext_g

############################################################################################################
#												Addon Filmes e Series									  #
############################################################################################################

def listamenusseries(nome_nov,url,estilo,tipo,tipo_user,servidor_user,iconimage,fanart):
	check_login = login2()
	if check_login == True:
		database = Database.isExists()
		menuSeries(os.path.join(__ART_FOLDER__, __SKIN__, 'series.png'),__SITEAddon__+'Imagens/series_fanart.png')
	else:
		__ALERTA__(AddonTitle, 'Erro a fazer login nesta parte. Tente novamente mais tarde.')

def listamenusfilmes(nome_nov,url,estilo,tipo,tipo_user,servidor_user,iconimage,fanart):
	check_login = login2()
	if check_login == True:
		database = Database.isExists()
		menuFilmes(os.path.join(__ART_FOLDER__, __SKIN__, 'filmes.png'),__SITEAddon__+'Imagens/filmes_fanart.png')
	else:
		__ALERTA__(AddonTitle, 'Erro a fazer login nesta parte. Tente novamente mais tarde.')

def listamenusanimes(nome_nov,url,estilo,tipo,tipo_user,servidor_user,iconimage,fanart):
	check_login = login2()
	if check_login == True:
		database = Database.isExists()
		menuAnimes(os.path.join(__ART_FOLDER__, __SKIN__, 'animes.png'),__SITEAddon__+'Imagens/series_fanart.png')
	else:
		__ALERTA__(AddonTitle, 'Erro a fazer login nesta parte. Tente novamente mais tarde.')

def menuFilmes(iconimage,fanart):
	addDir2('Todos os Filmes', __API_SITE__+'filmes.php?qualidade='+__Qualidade__, 111, 'filmes', iconimage, 1, None, None, fanart)
	addDir2('Filmes em Destaque',  __API_SITE__+'filmes.php?action=destaque&qualidade='+__Qualidade__, 111, 'filmes', iconimage, 1, None, None, fanart)
	addDir2('Filmes por Ano', __API_SITE__+'filmes.php?action=ano', 119, 'listagemAnos', os.path.join(__ART_FOLDER__, __SKIN__, 'ano.png'), 1, None, None, fanart)
	addDir2('Filmes por Genero', __API_SITE__+'filmes.php?action=categoria', 118, 'listagemGeneros', os.path.join(__ART_FOLDER__, __SKIN__, 'genero.png'), 1, None, None, fanart)
	addDir2('Filmes por IMDB Raking',  __API_SITE__+'filmes.php?action=imdbRank&qualidade='+__Qualidade__, 111, 'filmes', iconimage, 1, None, None, fanart)
	addDir2('Filmes Para Crianças',  __API_SITE__+'filmes.php?action=pt&qualidade='+__Qualidade__, 111, 'filmes', iconimage, 1, None, None, fanart)
	
	vista_menu()

def menuSeries(iconimage,fanart):
	addDir2('Todas as Series', __API_SITE__+'series.php', 123, 'series', iconimage, 1, None, None, fanart)
	addDir2('Series em Destaque',  __API_SITE__+'series.php?action=destaque', 123, 'series', iconimage, 1, None, None, fanart)
	addDir2('Series por Ano', __API_SITE__+'series.php?action=ano', 119, 'listagemAnos', os.path.join(__ART_FOLDER__, __SKIN__, 'ano.png'), 1, None, None, fanart)
	addDir2('Series por Genero', __API_SITE__+'series.php?action=categoria', 118, 'listagemGeneros', os.path.join(__ART_FOLDER__, __SKIN__, 'genero.png'), 1, None, None, fanart)

	vista_menu()

def menuAnimes(iconimage,fanart):
	addDir2('Todos os Animes', __API_SITE__+'animes.php', 123, 'animes', iconimage, 1, None, None, fanart)
	addDir2('Animes em Destaque',  __API_SITE__+'animes.php?action=destaque', 123, 'animes', iconimage, 1, None, None, fanart)
	addDir2('Animes por Ano', __API_SITE__+'animes.php?action=ano', 119, 'listagemAnos', os.path.join(__ART_FOLDER__, __SKIN__, 'ano.png'), 1, None, None, fanart)
	addDir2('Animes por Genero', __API_SITE__+'animes.php?action=categoria', 118, 'listagemGeneros', os.path.join(__ART_FOLDER__, __SKIN__, 'genero.png'), 1, None, None, fanart)

	vista_menu()

def getListCategoria():
	cat = ler_ficheiro(os.path.join(__PASTA_DADOS__,'categorias.liveit')).replace('"', "'")
	return cat

def removerAcentos(txt, encoding='utf-8'):
	return normalize('NFKD', txt.decode(encoding)).encode('ASCII','ignore')

def escrever_ficheiro(ficheiro, conteudo):
    f = open(ficheiro, mode="w")
    f.write(conteudo)
    f.close()

def ler_ficheiro(ficheiro):
    f = open(ficheiro, "r")
    conteudo =  f.read()
    f.close()
    return conteudo

def getCategoria(id):
	cat = ler_ficheiro(os.path.join(__PASTA_DADOS__,'categorias.liveit')).replace('"', "'")
	for c in ast.literal_eval(cat):
		if int(id) == 0:
			return ''
		if int(c['id_categoria']) == int(id):
			try:
				cat = c['categorias'].decode('utf-8')
			except:
				cat = c['categorias'].encode('utf-8')
			return cat
	
	"""if int(id) == 0:
		return ''
	
	for c, i in cats:
		if int(i) == int(id):
			return c"""

	return ''
	
def getCookie():
	return 'username='+__ADDON__.getSetting('tokenMrpiracy')

def verificarVistoLocal(idVideo, temporada=None, episodio=None):
	pastaVisto=os.path.join(__PASTA_DADOS__,'vistos')

	if temporada and episodio:
		ficheiroVisto = os.path.join(pastaVisto,str(idVideo)+'_S'+str(temporada)+'x'+str(episodio)+'.liveit')
	else:
		ficheiroVisto = os.path.join(pastaVisto,str(idVideo)+'.liveit')

	if os.path.exists(ficheiroVisto):
		return True
	else:
		return False

def filmes(url, pagina):
	#headers['Authorization'] = 'Bearer %s' % __ADDON__.getSetting('tokenMrpiracy')
	#if resultado == 'DNS':
	#	__ALERTA__(AddonTitle, 'Tem de alterar os DNS para poder usufruir do __ADDON__.')
	#	return False
	resultado = abrir_url(url, header=headers, cookie=getCookie())
	resultado = json.loads(resultado)
	vistos = Database.selectFilmes()
	opcao = __ADDON__.getSetting('marcarVisto')
	for i in resultado['data']:
		setFilme(i, vistos, opcao)
	try: 
		current = resultado['meta']['current']
	except: 
		__ALERTA__(AddonTitle, 'Aguarde pela próxima atualização. Ou tente mais tarde.')
		return False
	current = resultado['meta']['current']
	total = resultado['meta']['total']
	try: proximo = resultado['meta']['paginacao']['next']
	except: pass 
	if int(current) < int(total):
		addDir2('Próxima página ('+str(current)+'/'+str(total)+')', proximo, 111, 'filmes', os.path.join(__ART_FOLDER__, __SKIN__, 'proximo.png'),1)
	vista_filmesSeries()
		
def series(url):
	#headers['Authorization'] = 'Bearer %s' % __ADDON__.getSetting('tokenMrpiracy')
	#if resultado == 'DNS':
	#	__ALERTA__(AddonTitle, 'Tem de alterar os DNS para poder usufruir do __ADDON__.')
	#	return False
	resultado = abrir_url(url, header=headers, cookie=getCookie())
	resultado = json.loads(resultado)
	if 'serie' in url:
		tipo = 'serie'
	elif 'anime' in url:
		tipo = 'anime'
		
	if 'serie' in url:
		tipo = 'series'
	elif 'anime' in url:
		tipo = 'animes'
	vistos = Database.selectFilmes()
	opcao = __ADDON__.getSetting('marcarVisto')
	for i in resultado['data']:
		setSeries(i, vistos, opcao, tipo)
	try: 
		current = resultado['meta']['current']
	except: 
		__ALERTA__(AddonTitle, 'Aguarde pela próxima atualização. Ou tente mais tarde.')
		return False
	current = resultado['meta']['current']
	total = resultado['meta']['total']
	try: proximo = resultado['meta']['paginacao']['next']
	except: pass 
	if int(current) < int(total):
		addDir2('Proxima pagina ('+str(current)+'/'+str(total)+')', proximo, 123, 'series', os.path.join(__ART_FOLDER__, __SKIN__, 'proximo.png'))
	vista_filmesSeries()

def getSeasons(url):
	#headers['Authorization'] = 'Bearer %s' % __ADDON__.getSetting('tokenMrpiracy')
	resultado = abrir_url(url, header=headers, cookie=getCookie())
	resultado = json.loads(resultado)['data'][0]
	id = url.split('=')[-1]
	if 'serie' in url:
		url = __API_SITE__+'series.php?action=temporada&idSerie='+id+'&n=%s'
	elif 'anime' in url:
		url = __API_SITE__+'animes.php?action=temporada&idSerie='+id+'&n=%s'
	
	try:
		resultado['temporadas'] = resultado['temporadas'].replace('especial', '999')
	except:
		pass
	if resultado == 'DNS':
		__ALERTA__(AddonTitle, 'Tem de alterar os DNS para poder usufruir do __ADDON__.')
		return False
	
	j=1
	
	if resultado['temporadas'] == "":
		return False
	for c, i in sorted(json.loads(resultado['temporadas']).iteritems(), key=lambda i: int(i[0])):
		if c != '999':
			addDir2("[B]Temporada[/B] "+str(c), (url % str(c)), 115, 'episodios', os.path.join(__ART_FOLDER__, __SKIN__,'temporadas', 'temporada'+str(c)+'.png'),poster=__API__+resultado['background'])
		else:
			addDir2("[B]Temporada[/B] "+str(c), (url % '999'), 115, 'episodios', os.path.join(__ART_FOLDER__, __SKIN__,'temporadas', 'temporada'+str(c)+'.png'),poster=__API__+resultado['background'])
	
	vista_temporadas()

def getEpisodes(url):
	#headers['Authorization'] = 'Bearer %s' % __ADDON__.getSetting('tokenMrpiracy')
	resultado = abrir_url(url, header=headers, cookie=getCookie())
	if resultado == 'DNS':
		__ALERTA__(AddonTitle, 'Tem de alterar os DNS para poder usufruir do __ADDON__.')
		return False
	resultado = json.loads(resultado)
	if 'serie' in url:
		tipo = 'series'
	elif 'anime' in url:
		tipo = 'animes'
	for i in resultado['data']:
		pt = ''
		infoLabels = {'Title': i['nome_episodio'], 'Code': i['IMBD'], 'Episode': i['episodio'], 'Season': i['temporada'] }
		
		try:
			nome = i['nome_episodio'].decode('utf-8')
		except:
			nome = i['nome_episodio'].encode('utf-8')
		br = ''
		final = ''
		semLegenda = ''
		if i['fimtemporada'] == 1:
			final = '[B]Final da Temporada [/B]'
		if i['semlegenda'] == 1:
			semLegenda = '[COLOR red][B]S/ LEGENDA [/B][/COLOR]'
		#if 'Brasileiro' in categoria:
		#	br = '[B][COLOR green]B[/COLOR][COLOR yellow]R[/COLOR]: [/B]'
		#if 'Portu' in categoria:
		#	pt = '[B][COLOR green]P[/COLOR][COLOR red]T[/COLOR]: [/B]'
		if 'PT' in i['IMBD']:
			i['IMBD'] = re.compile('(.+?)PT').findall(i['IMBD'])[0]
			pt = '[B][COLOR green]P[/COLOR][COLOR red]T[/COLOR]: [/B]'
		visto = False
		cor = 'white'
		#if i['visto'] == 1:
		#	visto = True	
		
		imagem = ''
		if i['imagem'] == 1:
			imagem = __API__+'images/series/'+i['IMBD']+'.jpg'
		elif i['imagem'] == 0:
			imagem = __API__+'images/capas/'+i['imdbSerie']+'.jpg'
		
		#imagem = imagem.replace('PT','')
		#i['background'] = i['background'].replace('PT','')
		i['background'] = 'images/background/'+i['IMBD']+'.jpg'
		fanarttt = __API__+i['background']
		
		nomeee = pt+br+final+semLegenda+'[COLOR '+cor+'][B]Episodio '+str(i['episodio'])+'[/B][/COLOR] '+removerAcentos(nome)
		urlnovo = __API_SITE__+tipo+'.php?action=episodio&idSerie='+str(i['id_serie'])+'&idEpisodio='+str(i['id_episodio'])
		addVideo(nomeee, urlnovo, 113, imagem, visto, 'episodio', i['temporada'], i['episodio'], infoLabels, fanarttt)
	
	vista_episodios()

def getGeneros(url):
	lista = getListCategoria()
	if 'filmes' in url:
		tipo = 0
		qualidade = '&qualidade='+__Qualidade__
	elif 'series' in url:
		tipo = 1
		qualidade = ''
	elif 'animes' in url:
		tipo = 2
		qualidade = ''
	
	for c in ast.literal_eval(lista):
		if c['id_categoria'] == "0":
			continue
		try:
			cat = c['categorias'].decode('utf-8')
		except:
			cat = c['categorias'].encode('utf-8')
		
		urlnovo = url+'&categoria='+str(c['id_categoria'])+qualidade;
		addDir2(cat, urlnovo, 122, 'categorias', os.path.join(__ART_FOLDER__, __SKIN__, 'genero.png'))
	
	vista_menu()

def setFilme(i, vistos, opcao):
	categoria = getCategoria(i['categoria1'])
	if int(i['categoria2']) != 0:
		categoria += ','+getCategoria(i['categoria2'])
	if int(i['categoria3']) != 0:
		categoria += ','+getCategoria(i['categoria3'])
	
	pt = ''
	br = ''
	semLegenda = ''
	visto = False
	vistoa = False
	verificarVistoLocal(i['id_video'])
	
	try:
		nome = i['nome_ingles'].decode('utf-8')
	except:
		nome = i['nome_ingles'].encode('utf-8')
	if 'http' not in i['foto']:
		i['foto'] = __API__+'images/capas/'+i['foto'].split('/')[-1]
	
	if i['legenda'] == "semlegenda":
		semLegenda = '[COLOR red][B]S/ LEGENDA [/B][/COLOR]'
	if 'Brasileiro' in categoria:
		br = '[B][COLOR green]B[/COLOR][COLOR yellow]R[/COLOR]: [/B]'
	if 'Portu' in categoria:
		pt = '[B][COLOR green]P[/COLOR][COLOR red]T[/COLOR]: [/B]'
	cor = "white"
	if 'PT' in i['IMBD']:
		i['IMBD'] = re.compile('(.+?)PT').findall(i['IMBD'])[0]
		pt = '[B][COLOR green]P[/COLOR][COLOR red]T[/COLOR]: [/B]'
	
	imdbR = json.loads(i['imdbRating'])
	
	infoLabels = {'Title': i['nome_ingles'], 'Year': i['ano'], 'Genre': categoria, 'Plot':i['descricao_video'], 'Cast':i['atores'].split(','), 'Trailer': imdbR['trailer'], 'Director': i['diretor'], 'Rating': imdbR['ranking'], 'IMDBNumber': i['IMBD'] }

	nomeee = '[COLOR '+cor+']'+pt+br+semLegenda+removerAcentos(nome)+' ('+i['ano']+')[/COLOR]'
	urlnoo = __API_SITE__+'filmes.php?action=id&idFilme='+str(i['id_video'])
	fotooo = i['foto']
	i['background'] = 'images/background/'+i['IMBD']+'.jpg'
	fanarttt = __API__+i['background']
	
	addVideo(nomeee, urlnoo, 113, fotooo,visto, 'player', 0, 0, infoLabels, fanarttt, trailer=imdbR['trailer'])

def setSeries(i, vistos, opcao, tipo):
	categoria = getCategoria(i['categoria1'])
	if int(i['categoria2']) != 0:
		categoria += ','+getCategoria(i['categoria2'])
	if int(i['categoria3']) != 0:
		categoria += ','+getCategoria(i['categoria3'])
	
	pt = ''
	br = ''
	semLegenda = ''
	#if i['legenda'] == "semlegenda":
	#	semLegenda = '[COLOR red][B]S/ LEGENDA [/B][/COLOR]'
	if 'Brasileiro' in categoria:
		br = '[B][COLOR green]B[/COLOR][COLOR yellow]R[/COLOR]: [/B]'
	if 'Portu' in categoria:
		pt = '[B][COLOR green]P[/COLOR][COLOR red]T[/COLOR]: [/B]'
	if 'PT' in i['IMBD']:
		pt = '[B][COLOR green]P[/COLOR][COLOR red]T[/COLOR]: [/B]'
	visto = False
	vistoa = False
	verificarVistoLocal(i['id_video'])
	try:
		nome = i['nome_ingles'].decode('utf-8')
	except:
		nome = i['nome_ingles'].encode('utf-8')
	if 'http' not in i['foto']:
		i['foto'] = __API__+'images/capas/'+i['foto'].split('/')[-1]
		#i['foto'] = i['foto'].replace('PT','')
	
	imdbR = json.loads(i['imdbRating'])
	urlnoo = __API_SITE__+tipo+'.php?action=id&idSerie='+str(i['id_video'])
	infoLabels = {'Title': i['nome_ingles'], 'Year': i['ano'], 'Genre': categoria, 'Plot': i['descricao_video'], 'Cast':i['atores'].split(','), 'Trailer': imdbR['trailer'], 'Director': i['diretor'], 'Rating': imdbR['ranking'], 'Code': i['IMBD'] }
	
	nomeee = pt+br+semLegenda+removerAcentos(nome)+' ('+i['ano']+')'
	fotooo = i['foto']
	#i['background'] = i['background'].replace('PT','')
	i['background'] = 'images/background/'+i['IMBD']+'.jpg'
	fanarttt = __API__+i['background']
	addDir2(nomeee, urlnoo, 114, 'temporadas', fotooo, tipo='serie', infoLabels=infoLabels,poster=fanarttt,visto=visto)

def categorias(url):
	#headers['Authorization'] = 'Bearer %s' % __ADDON__.getSetting('tokenMrpiracy')
	resultado = abrir_url(url, header=headers, cookie=getCookie())
	#if resultado == 'DNS':
	#	__ALERTA__(AddonTitle, 'Tem de alterar os DNS para poder usufruir do __ADDON__.')
	#	return False
	resultado = json.loads(resultado)
	vistos = Database.selectFilmes()
	opcao = __ADDON__.getSetting('marcarVisto')
	if 'serie' in url:
		tipo = 'series'
	elif 'anime' in url:
		tipo = 'animes'
	for i in resultado["data"]:
		if 'filme' in url:
			setFilme(i, vistos, opcao)
		elif 'serie' in url or 'anime' in url:
			setSeries(i, vistos, opcao, tipo)
	current = resultado['meta']['current']
	total = resultado['meta']['total']
	try: proximo = resultado['meta']['paginacao']['next']
	except: pass 
	if int(current) < int(total):
		addDir2('Próxima página ('+str(current)+'/'+str(total)+')', proximo, 121, 'anos', os.path.join(__ART_FOLDER__, __SKIN__, 'proximo.png'),1)
	
	vista_filmesSeries()

def getYears(url):
	anos = [
			'2019',
			'2018',
			'2017',
			'2016',
			'2015',
			'2014',
			'2013',
			'2012',
			'2011',
			'2010',
			'2009',
			'2008',
			'2007',
			'2006',
			'2000-2005',
			'1990-1999',
			'1980-1989',
			'1970-1979',
			'1960-1969',
			'1950-1959',
			'1900-1949'
		]
	if 'filmes' in url:
		tipo = 0
		qualidade = '&qualidade='+__Qualidade__
	elif 'series' in url:
		tipo = 1
		qualidade = ''
	elif 'animes' in url:
		tipo = 2
		qualidade = ''
	for i in anos:
		urlnovo = url+'&ano='+i+qualidade;
		addDir2(i, urlnovo, 121, 'anos', os.path.join(__ART_FOLDER__, __SKIN__, 'ano.png'))
		
	vista_menu()

def anos(url):
	#headers['Authorization'] = 'Bearer %s' % __ADDON__.getSetting('tokenMrpiracy')
	resultado = abrir_url(url, header=headers, cookie=getCookie())
	if resultado == 'DNS':
		__ALERTA__(AddonTitle, 'Tem de alterar os DNS para poder usufruir do __ADDON__.')
		return False
	resultado = json.loads(resultado)
	vistos = Database.selectFilmes()
	opcao = __ADDON__.getSetting('marcarVisto')
	if 'serie' in url:
		tipo = 'series'
	elif 'anime' in url:
		tipo = 'animes'
	for i in resultado["data"]:
		if 'filme' in url:
			setFilme(i, vistos, opcao)
		elif 'serie' in url or 'anime' in url:
			setSeries(i, vistos, opcao, tipo)
	
	try: 
		current = resultado['meta']['current']
	except: 
		__ALERTA__(AddonTitle, 'Aguarde pela próxima atualização. Ou tente mais tarde.')
		return False
	current = resultado['meta']['current']
	total = resultado['meta']['total']
	try: proximo = resultado['meta']['paginacao']['next']
	except: pass 
	if int(current) < int(total):
		addDir2('Próxima página ('+str(current)+'/'+str(total)+')', proximo, 121, 'anos', os.path.join(__ART_FOLDER__, __SKIN__, 'proximo.png'),1)
	
	vista_filmesSeries()

def getEventos():
	#headers['Authorization'] = 'Bearer %s' % __ADDON__.getSetting('tokenMrpiracy')
	resultado = abrir_url(__API_SITE__+'eventos', header=headers, cookie=getCookie())
	resultado = json.loads(resultado)
	try:
		if resultado['codigo'] == 204:
			return False
	except:
		pass
	return resultado['data']['nome']
		
		
def player(name,url,iconimage,temporada,episodio,serieNome):
	#headers['Authorization'] = 'Bearer %s' % __ADDON__.getSetting('tokenMrpiracy')
	resultado = abrir_url(url, header=headers, cookie=getCookie())
	if resultado == 'DNS':
		__ALERTA__(AddonTitle, 'Tem de alterar os DNS para poder usufruir do __ADDON__.')
		return False
	
	resultado = json.loads(resultado)[0]
	#resultado = json.loads(resultado)
	infolabels = dict()
	coiso = ''
	pastaData = ''
	tipo = ''
	idVideo = ''
	if 'filme' in url:
		tipo = 'filme'
		infolabels['Code'] = resultado['IMBD']
		infolabels['Year'] = resultado['ano']
		idVideo = resultado['id_video']
		nome = resultado['nome_ingles']
		temporada = 0
		episodio = 0
		coiso = 'filme'
	else:
		if 'serie' in url:
			tipo = 'serie'
		else:
			tipo = 'anime'
		idVideo = resultado['id_serie']
		nome = resultado['nome_episodio']
		temporada = resultado['temporada']
		episodio = resultado['episodio']
		coiso = 'outro'

	mensagemprogresso = xbmcgui.DialogProgress()
	mensagemprogresso.create(AddonTitle, u'Abrir emissão','Por favor aguarde...')
	mensagemprogresso.update(25, "", u'Obter video e legenda', "")

	stream, legenda, ext_g = getStreamLegenda(idVideo, tipo, coiso=coiso)
	if stream == False and legenda == 204:
		mensagemprogresso.close()
		__ALERTA__(AddonTitle, 'Tem de esperar 8 horas até conseguir visualizar algum video.')
		return False
	
	mensagemprogresso.update(50, "", u'Prepara-te, vai começar!', "")
	playlist = xbmc.PlayList(1)
	playlist.clear()
	listitem = xbmcgui.ListItem(name, iconImage="DefaultVideo.png", thumbnailImage=iconimage)

	listitem.setInfo(type="Video", infoLabels=infolabels)
	listitem.setProperty('mimetype', 'video/x-msvideo')
	listitem.setProperty('IsPlayable', 'true')
	
	listitem.setPath(path=stream)
	playlist.add(stream, listitem)
	xbmcplugin.setResolvedUrl(int(sys.argv[1]), True, listitem)
	mensagemprogresso.update(75, "", u'Boa Sessão!!!', "")

	if stream == False:
		__ALERTA__(AddonTitle, 'O servidor escolhido não disponível, escolha outro ou tente novamente mais tarde.')
	else:
		#__ALERTA__(AddonTitle, 'Stream: '+stream)
		player_mr = Player.Player(url=url, idFilme=idVideo, pastaData=__PASTA_DADOS__, temporada=temporada, episodio=episodio, nome=name, logo=os.path.join(__ADDON_FOLDER__,'icon.png'))
		
		mensagemprogresso.close()
		player_mr.play(playlist)
		player_mr.setSubtitles(legenda)

		while player_mr.playing:
			xbmc.sleep(5000)
			#player_mr.trackerTempo()

def marcarVisto(url):
	resultado = abrir_url(url, header=headers, cookie=getCookie())
	resultado = json.loads(resultado)[0]
	links = url.split('/')
	opcao = __ADDON__.getSetting('marcarVisto')
	if 'filme' in url:
		id_video = resultado['id_video']
		imdb = resultado['IMBD']
		post = {'id_filme': id_video}
		tipo = 0
	elif 'serie' in url:
		imdb  = resultado['fotoSerie'].split('/')[-1].split('.')[0]
		id_video = resultado['id_serie']
		temporada = resultado['temporada']
		episodio = resultado['episodio']
		post = {'id_serie': id_video, 'temporada': temporada, 'episodio':episodio}
		tipo = 1
	elif 'anime' in url:
		imdb  = resultado['fotoSerie'].split('/')[-1].split('.')[0]
		id_video = resultado['id_serie']
		temporada = resultado['temporada']
		episodio = resultado['episodio']
		post = {'id_anime': id_video, 'temporada': temporada, 'episodio':episodio}
		tipo = 2
	pastaVisto=os.path.join(__PASTA_DADOS__,'vistos')
	try:
		os.makedirs(pastaVisto)
	except:
		pass
	if tipo == 1 or tipo == 2:
		ficheiro = os.path.join(pastaVisto, str(id_video)+'_S'+str(temporada)+'x'+str(episodio)+'.liveit')
	elif tipo == 0:
		ficheiro = os.path.join(pastaVisto, str(id_video)+'.liveit')
	if not os.path.exists(ficheiro):
		f = open(ficheiro, 'w')
		f.write('')
		f.close()
	escrever_ficheiro(os.path.join(__PASTA_DADOS__,'vistos_filmes.liveit'), vistos_filmes)
	xbmc.executebuiltin("XBMC.Notification("+AddonTitle+","+"Marcado como visto"+","+"6001"+","+ os.path.join(controlo.addonFolder,'icon.png')+")")
	xbmc.executebuiltin("Container.Refresh")

def marcarNaoVisto(url):
	resultado = abrir_url(url, header=headers, cookie=getCookie())
	resultado = json.loads(resultado)[0]
	links = url.split('/')
	opcao = __ADDON__.getSetting('marcarVisto')
	if 'filme' in url:
		id_video = resultado['id_video']
		imdb = resultado['IMBD']
		post = {'id_filme': id_video}
		tipo = 0
	elif 'serie' in url:
		imdb  = resultado['fotoSerie'].split('/')[-1].split('.')[0]
		id_video = resultado['id_serie']
		temporada = resultado['temporada']
		episodio = resultado['episodio']
		post = {'id_serie': id_video, 'temporada': temporada, 'episodio':episodio}
		tipo = 1
	elif 'anime' in url:
		imdb  = resultado['fotoSerie'].split('/')[-1].split('.')[0]
		id_video = resultado['id_serie']
		temporada = resultado['temporada']
		episodio = resultado['episodio']
		post = {'id_anime': id_video, 'temporada': temporada, 'episodio':episodio}
		tipo = 2
	
	pastaVisto=os.path.join(__PASTA_DADOS__,'vistos')
	try:
		os.makedirs(pastaVisto)
	except:
		pass

	if tipo == 1 or tipo == 2:
		ficheiro = os.path.join(pastaVisto, str(id_video)+'_S'+str(temporada)+'x'+str(episodio)+'.mrpiracy')
	elif tipo == 0:
		ficheiro = os.path.join(pastaVisto, str(id_video)+'.mrpiracy')

	if os.path.exists(ficheiro):
		os.remove(ficheiro)
	escrever_ficheiro(os.path.join(__PASTA_DADOS__,'vistos_filmes.liveit'), vistos)
	xbmc.executebuiltin("XBMC.Notification("+AddonTitle+","+"Marcado como visto"+","+"6001"+","+ os.path.join(controlo.addonFolder,'icon.png')+")")
	xbmc.executebuiltin("Container.Refresh")

def getStreamLegenda(id, tipo, coiso=None):
	if tipo == 'filme':
		url = __API_SITE__+tipo+'s.php?action=links&idFilme='+id
	if tipo == 'serie':
		url = __API_SITE__+tipo+'s.php?action=links&idEpisodio='+id
	if tipo == 'anime':
		url = __API_SITE__+tipo+'s.php?action=links&idEpisodio='+id

	resultado = abrir_url(url, header=headers, cookie=getCookie())
	resultado = json.loads(resultado)
	try:
		if resultado['codigo'] == 204:
			return False, 204, 204
	except: 
		resultado = resultado[0]
	
	i = 0
	servidores = []
	titulos = []
	nome = ''
	
	if resultado['URL'] != '':
		i+=1
		if 'openload' in resultado['URL']:
			nome = "OpenLoad"
			servidores.append(resultado['URL'])
			titulos.append('Servidor #%s: %s' % (i, nome))
		elif 'vidzi' in resultado['URL']:
			nome = 'Vidzi'
			servidores.append(resultado['URL'])
			titulos.append('Servidor #%s: %s' % (i, nome))
		elif 'google' in resultado['URL'] or 'cloud.mail.ru' in resultado['URL']:
			nome = AddonTitle
			servidores.append(resultado['URL'])
			titulos.append('Servidor #%s: %s' % (i, nome))
		elif 'uptostream.com' in resultado['URL']:
			nome = 'UpToStream'
			servidores.append(resultado['URL'])
			titulos.append('Servidor #%s: %s' % (i, nome))
		elif 'rapidvideo.com' in resultado['URL'] or 'raptu' in resultado['URL']:
			nome = 'Raptu'
			servidores.append(resultado['URL'])
			titulos.append('Servidor #%s: %s' % (i, nome))
		elif 'vidoza.net' in resultado['URL']:
			nome = 'Vidoza'
			servidores.append(resultado['URL'])
			titulos.append('Servidor #%s: %s' % (i, nome))
		elif 'streamango.' in resultado['URL']:
			nome = 'Streamango'
			servidores.append(resultado['URL'])
			titulos.append('Servidor #%s: %s' % (i, nome))
	if resultado['URL2'] != '':
		i+=1
		if 'openload' in resultado['URL2']:
			nome = "OpenLoad"
			servidores.append(resultado['URL2'])
			titulos.append('Servidor #%s: %s' % (i, nome))
		elif 'vidzi' in resultado['URL2']:
			nome = 'Vidzi'
			servidores.append(resultado['URL2'])
			titulos.append('Servidor #%s: %s' % (i, nome))
		elif 'google' in resultado['URL2'] or 'cloud.mail.ru' in resultado['URL2']:
			nome = AddonTitle
			servidores.append(resultado['URL2'])
			titulos.append('Servidor #%s: %s' % (i, nome))
		elif 'uptostream.com' in resultado['URL2']:
			nome = 'UpToStream'
			servidores.append(resultado['URL2'])
			titulos.append('Servidor #%s: %s' % (i, nome))
		elif 'rapidvideo.com' in resultado['URL2'] or 'raptu' in resultado['URL2']:
			nome = 'Raptu'
			servidores.append(resultado['URL2'])
			titulos.append('Servidor #%s: %s' % (i, nome))
		elif 'vidoza.net' in resultado['URL2']:
			nome = 'Vidoza'
			servidores.append(resultado['URL2'])
			titulos.append('Servidor #%s: %s' % (i, nome))
		elif 'streamango.' in resultado['URL2']:
			nome = 'Streamango'
			servidores.append(resultado['URL2'])
			titulos.append('Servidor #%s: %s' % (i, nome))
	try:
		if resultado['URL3'] != '':
			i+=1
			if 'openload' in resultado['URL3']:
				nome = "OpenLoad"
				servidores.append(resultado['URL3'])
				titulos.append('Servidor #%s: %s' % (i, nome))
			elif 'vidzi' in resultado['URL3']:
				nome = 'Vidzi'
				servidores.append(resultado['URL3'])
				titulos.append('Servidor #%s: %s' % (i, nome))
			elif 'google' in resultado['URL3'] or 'cloud.mail.ru' in resultado['URL3']:
				nome = AddonTitle
				servidores.append(resultado['URL3'])
				titulos.append('Servidor #%s: %s' % (i, nome))
			elif 'uptostream.com' in resultado['URL3']:
				nome = 'UpToStream'
				servidores.append(resultado['URL3'])
				titulos.append('Servidor #%s: %s' % (i, nome))
			elif 'rapidvideo.com' in resultado['URL3'] or 'raptu' in resultado['URL3']:
				nome = 'Raptu'
				servidores.append(resultado['URL3'])
				titulos.append('Servidor #%s: %s' % (i, nome))
			elif 'vidoza.net' in resultado['URL3']:
				nome = 'Vidoza'
				servidores.append(resultado['URL3'])
				titulos.append('Servidor #%s: %s' % (i, nome))
			elif 'streamango.' in resultado['URL3']:
				nome = 'Streamango'
				servidores.append(resultado['URL3'])
				titulos.append('Servidor #%s: %s' % (i, nome))
	except:
		pass
	try:
		if resultado['URL4'] != '':
			i+=1
			if 'openload' in resultado['URL4']:
				nome = "OpenLoad"
				servidores.append(resultado['URL4'])
				titulos.append('Servidor #%s: %s' % (i, nome))
			elif 'vidzi' in resultado['URL4']:
				nome = 'Vidzi'
				servidores.append(resultado['URL4'])
				titulos.append('Servidor #%s: %s' % (i, nome))
			elif 'google' in resultado['URL4'] or 'cloud.mail.ru' in resultado['URL4']:
				nome = AddonTitle
				servidores.append(resultado['URL4'])
				titulos.append('Servidor #%s: %s' % (i, nome))
			elif 'uptostream.com' in resultado['URL4']:
				nome = 'UpToStream'
				servidores.append(resultado['URL4'])
				titulos.append('Servidor #%s: %s' % (i, nome))
			elif 'rapidvideo.com' in resultado['URL4'] or 'raptu' in resultado['URL4']:
				nome = 'Raptu'
				servidores.append(resultado['URL4'])
				titulos.append('Servidor #%s: %s' % (i, nome))
			elif 'vidoza.net' in resultado['URL4']:
				nome = 'Vidoza'
				servidores.append(resultado['URL4'])
				titulos.append('Servidor #%s: %s' % (i, nome))
			elif 'streamango.' in resultado['URL4']:
				nome = 'Streamango'
				servidores.append(resultado['URL4'])
				titulos.append('Servidor #%s: %s' % (i, nome))
	except:
		pass
	legenda = ''
	stream = ''
	if '://' in resultado['legenda'] or resultado['legenda'] == '':
		legenda = __API__+'subs/%s.srt' % resultado['IMBD']
	elif resultado['legenda'] != '':
		if not '.srt' in resultado['legenda']:
			resultado['legenda'] = resultado['legenda']+'.srt'
		legenda = __API__+'subs/%s' % resultado['legenda']
	try:
		if resultado['semlegenda'] == 1:
			legenda = ''
	except:
		pass
	ext_g = 'coiso'
	legendaAux = legenda
	servidor = 0
	if len(titulos) > 1:
		servidor = xbmcgui.Dialog().select('Escolha o servidor', titulos)
	else:
		servidor = 0
	
	if 'vidzi' in servidores[servidor]:
			vidzi = URLResolverMedia.Vidzi(servidores[servidor])
			stream = vidzi.getMediaUrl()
			legenda = vidzi.getSubtitle()
	elif 'uptostream.com' in servidores[servidor]:
		stream = URLResolverMedia.UpToStream(servidores[servidor]).getMediaUrl()
	elif 'server.mrpiracy.win' in servidores[servidor]:
		stream = servidores[servidor]
	elif 'openload' in servidores[servidor]:
		stream = URLResolverMedia.OpenLoad(servidores[servidor]).getMediaUrl()
		legenda = URLResolverMedia.OpenLoad(servidores[servidor]).getSubtitle()
		if not '.vtt' in legenda or legenda == '':
			legenda = legendaAux
	elif 'drive.google.com/' in servidores[servidor]:
		stream, ext_g = URLResolverMedia.GoogleVideo(servidores[servidor]).getMediaUrl()
	elif 'cloud.mail.ru' in servidores[servidor]:
		stream, ext_g = URLResolverMedia.CloudMailRu(servidores[servidor]).getMediaUrl()
	elif 'rapidvideo.com' in servidores[servidor] or 'raptu' in servidores[servidor]:
		rapid = URLResolverMedia.RapidVideo(servidores[servidor])
		stream = rapid.getMediaUrl()
		legenda = rapid.getLegenda()
	elif 'vidoza.net' in servidores[servidor]:
		vidoz = URLResolverMedia.Vidoza(servidores[servidor])
		stream = vidoz.getMediaUrl()
		legenda = vidoz.getLegenda()
	elif 'streamango.' in servidores[servidor]:
		streaman = URLResolverMedia.Streamango(servidores[servidor])
		stream = streaman.getMediaUrl()
		legenda = streaman.getLegenda()
	
	if coiso == 'filme':
		legenda = legendaAux
		if resultado['IMBD'] not in legenda:
			legenda = __API__+'subs/%s.srt' % resultado['IMBD']
	
	if legenda == '':
		legenda = legendaAux
	return stream, legenda, ext_g


def pesquisaMov(url):
	codigo_fonte = ''
	dados = ''
	tabela = ''
	strPesquisa = ''
	ficheiro = ''
	site = ''
	qualidade = ''
	if 'filmes' in url:
		ficheiro = os.path.join(__PASTA_DADOS__,'filmes_pesquisa.liveit')
		tipo = 0
		qualidade = __Qualidade__
	elif 'series' in url:
		ficheiro = os.path.join(__PASTA_DADOS__,'series_pesquisa.liveit')
		tipo = 1
		site = 'series'
		qualidade = '2'
	elif 'animes' in url:
		ficheiro = os.path.join(__PASTA_DADOS__,'animes_pesquisa.liveit')
		tipo = 2
		site = 'animes'
		qualidade = '2'
	if 'page' not in url:
		try:
			tipo = xbmcgui.Dialog().select(u'Onde quer pesquisar?', ['Filmes', 'Series', 'Animes'])
		except:
			return False
		teclado = xbmc.Keyboard('', 'O que quer pesquisar?')
		if tipo == 0:
			url = __API_SITE__+'filmes.php?action=pesquisa'
			ficheiro = os.path.join(__PASTA_DADOS__,'filmes_pesquisa.liveit')
			qualidade = __Qualidade__
		elif tipo == 1:
			url = __API_SITE__+'series.php?action=pesquisa'
			ficheiro = os.path.join(__PASTA_DADOS__,'series_pesquisa.liveit')
			qualidade = '2'
			site = 'series'
		elif tipo == 2:
			url = __API_SITE__+'animes.php?action=pesquisa'
			ficheiro = os.path.join(__PASTA_DADOS__,'animes_pesquisa.liveit')
			qualidade = '2'
			site = 'animes'
		if xbmcvfs.exists(ficheiro):
			f = open(ficheiro, "r")
			texto = f.read()
			f.close()
			teclado.setDefault(texto)
		teclado.doModal()	

		if teclado.isConfirmed():
			strPesquisa = teclado.getText()
			if strPesquisa == '':
				__ALERTA__(AddonTitle, 'Insira algo na pesquisa.')
				addDir2('Alterar Pesquisa', url, 124, '', os.path.join(__ART_FOLDER__, __SKIN__, 'pesquisa.png'), 0)
				return False
			dados = urllib.urlencode({'texto': strPesquisa, 'qualidade': qualidade})
			try:
				f = open(ficheiro, mode="w")
				f.write(strPesquisa)
				f.close()
			except:
				__ALERTA__(AddonTitle, 'Não gravou o conteudo em '+ficheiro)
			resultado = abrir_url(url,post=dados, header=headers, cookie=getCookie())
	else:
		if xbmcvfs.exists(ficheiro):
			f = open(ficheiro, "r")
			texto = f.read()
			f.close()
		dados = urllib.urlencode({'texto': texto, 'qualidade':qualidade})
		resultado = abrir_url(url,post=dados, header=headers, cookie=getCookie())
	
	resultado = json.loads(resultado)
	try:
		if resultado['codigo'] == 204:
			__ALERTA__(AddonTitle, 'Deve Indicar um valor para pesquisa.')
			return False
	except:
		resultado = resultado
	vistos = Database.selectFilmes()
	opcao = __ADDON__.getSetting('marcarVisto')

	if resultado['data'] != '':
		if tipo == 0:
			for i in resultado['data']:
				setFilme(i, vistos, opcao)
		elif tipo == 1 or tipo == 2:
			for i in resultado['data']:
				setSeries(i, vistos, opcao, site)
		
		current = resultado['meta']['current']
		total = resultado['meta']['total']
		try: proximo = resultado['meta']['paginacao']['next']
		except: pass 
		if int(current) < int(total):
			addDir2('Proxima pagina ('+str(current)+'/'+str(total)+')', proximo, 124, 'pesquisa', os.path.join(__ART_FOLDER__, __SKIN__, 'proximo.png'))
		else:
			xbmcplugin.endOfDirectory(int(sys.argv[1]),cacheToDisc=False)
	vista_filmesSeries()

def pesquisa(servuss):
	codigo_fonte = ''
	dados = ''
	net = Net()
	#net.set_cookies(__COOKIE_FILE__)
	tabela = ''
	strPesquisa = ''
	ficheiro = ''
	url = ''
	if 'page' not in url:
		url = __SITEBD__+'search.php'
		if tipo == 3:
			tabela = 'canais_kodi'
			ficheiro = os.path.join(__PASTA_DADOS__,'canais.liveit')
		elif tipo == 4:
			tabela = 'praias_kodi'
			ficheiro = os.path.join(__PASTA_DADOS__,'praias.liveit')
		elif tipo == 5:
			tabela = 'radios_kodi'
			ficheiro = os.path.join(__PASTA_DADOS__,'radios.liveit')
		else:
			tabela = 'programas_kodi'
			ficheiro = os.path.join(__PASTA_DADOS__,'programas.liveit')
		
		if xbmcvfs.exists(ficheiro):
			f = open(ficheiro, "r")
			texto = f.read()
			f.close()
			teclado.setDefault(texto)
		teclado.doModal()	

		if teclado.isConfirmed():
			strPesquisa = teclado.getText()
			dados = urllib.urlencode({'texto': strPesquisa, 'qualidade': qualidade})
			try:
				f = open(ficheiro, mode="w")
				f.write(strPesquisa)
				f.close()
			except:
				__ALERTA__(AddonTitle, 'Não gravou o conteudo em '+ficheiro)
			resultado = abrir_url(url,post=dados, header=headers, cookie=getCookie())
	else:
		if xbmcvfs.exists(ficheiro):
			f = open(ficheiro, "r")
			texto = f.read()
			f.close()
		dados = urllib.urlencode({'texto': texto, 'qualidade':qualidade})
		resultado = abrir_url(url,post=dados, header=headers, cookie=getCookie())
	
	if strPesquisa != '':
		if resultado == 'DNS':
			__ALERTA__(AddonTitle, 'Tem de alterar os DNS para poder usufruir do __ADDON__.')
			return False
		
		xbmcplugin.endOfDirectory(int(sys.argv[1]),cacheToDisc=False)
		dados = {'searchBox': strPesquisa, 'tabela': tabela}
		codigo_fonte = net.http_POST(url, form_data=dados, headers=__HEADERS__).content.decode('latin-1').encode("utf-8")
		informa = {
				'servidor' : {
					'nome': '',
					'serv': ''
				},
				'servidores': [],
				'canais': []
			}
		sucesso = 'no'
		elems = ET.fromstring(codigo_fonte)
		
		for childee in elems:
			if(childee.tag == 'servidores'):
				servidor = {
					'nome': '',
					'link': ''
				}
				for gg in childee:	
					if(gg.tag == 'Nome'):
						servidor['nome'] = gg.text	
					elif(gg.tag == 'Servidor'):
						servidor['link'] = gg.text		
					informa['servidores'].append(servidor)
			
		for servvvv in informa['servidores']:
			if(servvvv['nome'] == servuss):
				informa['servidor']['nome'] = servvvv['nome']
				informa['servidor']['serv'] = servvvv['link']			
		
		for child in elems:
			if(child.tag == 'sucesso'):
				sucesso = child.text
			elif(child.tag == 'canais'):
				canal = {
					'nome': '',
					'logo': '',
					'link': '',
					'grupo': '',
					'nomeid': '',
					'idnovo': ''
				}
				adiciona = True
				pagante = False
				for g in child:
					adiciona = True
					if(g.tag == 'Nome'):
						canal['nome'] = g.text
					elif(g.tag == 'Imagem'):
						canal['logo'] = g.text
					elif(g.tag == 'Pagante'):
						if(g.text == 'true'):
							pagante = True
					elif(g.tag == 'Url'):
						urlchama = g.text.split(';')
						urlnoo = g.text
						try:
							if(servuss == 'Servidor1'):
								urlnoo = urlchama[0]
							elif(servuss == 'Servidor2'):
								urlnoo = urlchama[1]
							elif(servuss == 'Servidor3'):
								urlnoo = urlchama[2]
							elif(servuss == 'Servidor4'):
								urlnoo = urlchama[3]
							elif(servuss == 'Servidor5'):
								urlnoo = urlchama[4]
							elif(servuss == 'Servidor6'):
								urlnoo = urlchama[5]
							elif(servuss == 'Servidor7'):
								urlnoo = urlchama[6]
							elif(servuss == 'Servidor8'):
								urlnoo = urlchama[7]
							
							if(urlnoo == 'nada'):
								adiciona = False
							else:
								if pagante:
									canal['link'] = informa['servidor']['serv']+'live/utilizadorliveit/senhaliveit/'+urlnoo
								else:
									canal['link'] = urlnoo
						except:
							canal['link'] = g.text
					elif(g.tag == 'Grupo'):
						canal['grupo'] = g.text
					elif(g.tag == 'NomeID'):
						canal['nomeid'] = g.text
					elif(g.tag == 'ID'):
						canal['idnovo'] = g.text
				if adiciona:
					informa['canais'].append(canal)

		if sucesso == 'yes':
			addDir2('Alterar Pesquisa', servuss, 120, '', os.path.join(__ART_FOLDER__, __SKIN__, 'pesquisa.png'), 0)
			for cann in informa['canais']:
				nomee = cann['nome']
				img = cann['logo']
				rtmp = cann['link'].replace(' rtmp','rtmp').replace(' rtsp','rtsp').replace(' http','http').replace('utilizadorliveit',__ADDON__.getSetting("login_name")).replace('senhaliveit',__ADDON__.getSetting("login_password"))
				grup = cann['grupo']
				id_it = cann['nomeid']
				id_p = cann['idnovo']
				srt_f = ''
				descri = ''
				
				addLink2(nomee,rtmp,'http://liveitkodi.com/Logos/'+img)
			
			vista_Canais()
	else:
		__ALERTA__(AddonTitle, 'Insira algo na pesquisa.')
		addDir2('Alterar Pesquisa', servuss, 120, '', os.path.join(__ART_FOLDER__, __SKIN__, 'pesquisa.png'), 0)

def download(url,name, temporada,episodio,serieNome):
	#headers['Authorization'] = 'Bearer %s' % __ADDON__.getSetting('tokenMrpiracy')
	links = url.split('/')
	if 'filme' in url:
		id_video = links[-1]
		tipo = 0
	elif 'serie' in url:
		id_video = links[5]
		temporada = links[7]
		episodio = links[-1]
		tipo = 1
	elif 'anime' in url:
		id_video = links[5]
		temporada = links[7]
		episodio = links[-1]
		tipo = 2

	resultado = abrir_url(url, header=headers)
	if resultado == 'DNS':
		__ALERTA__(AddonTitle, 'Tem de alterar os DNS para poder usufruir do __ADDON__.')
		return False
	
	resultado = json.loads(resultado)

	stream, legenda, ext_g = getStreamLegenda(resultado)

	folder = xbmc.translatePath(__ADDON__.getSetting('pastaDownloads'))
	if(folder == 'Escolha a pasta para Download'):
		__ALERTA__(AddonTitle, 'Seleccione uma pasta primeiro no submenu Credênciais ou nas Configurações do __ADDON__.')
	else:
		if tipo > 0:
			if tipo == 1:
				resultadoa = abrir_url(__API_SITE__+'serie/'+id_video, header=headers)
			elif tipo == 2:
				resultadoa = abrir_url(__API_SITE__+'anime/'+id_video, header=headers)
			resultadoa = json.loads(resultadoa)
			if not xbmcvfs.exists(os.path.join(folder,'series')):
				xbmcvfs.mkdirs(os.path.join(folder,'series'))
			if not xbmcvfs.exists(os.path.join(folder,'series',resultadoa['nome_ingles'])):
				xbmcvfs.mkdirs(os.path.join(folder,'series',resultadoa['nome_ingles']))
			if not xbmcvfs.exists(os.path.join(folder,'series',resultadoa['nome_ingles'],"Temporada "+str(temporada))):
				xbmcvfs.mkdirs(os.path.join(folder,'series',resultadoa['nome_ingles'],"Temporada "+str(temporada)))
			folder = os.path.join(folder, 'series', resultadoa['nome_ingles'], "Temporada", str(temporada))
			name = "e"+str(episodio)+" - "+clean(resultado['nome_episodio'])
		else:
			if not xbmcvfs.exists(os.path.join(folder,'filmes')):
				xbmcvfs.mkdirs(os.path.join(folder,'filmes'))
			folder = os.path.join(folder,'filmes')
			name = resultado['nome_ingles']

		streamAux = clean(stream.split('/')[-1])
		extensaoStream = clean(streamAux.split('.')[-1])

		if '?mim' in extensaoStream:
			extensaoStream = re.compile('(.+?)\?mime=').findall(extensaoStream)[0]

		if ext_g != 'coiso':
			extensaoStream = ext_g

		nomeStream = name+'.'+extensaoStream
		nomelegenda = ''
		Downloader.Downloader().download(os.path.join(folder.decode("utf-8"), nomeStream), stream, name)
		
		if legendasOn:
			legendaAux = clean(legenda.split('/')[-1])
			extensaoLegenda = clean(legendaAux.split('.')[1])
			nomeLegenda = name+'.'+extensaoLegenda
			download_legendas(legenda, os.path.join(folder, nomeLegenda))

def download_legendas(url,path):
	contents = abrir_url(url)
	if contents:
		fh = open(path, 'w')
		fh.write(contents)
		fh.close()
	return

def clean(text):
	command={'&#8220;':'"','&#8221;':'"', '&#8211;':'-','&amp;':'&','&#8217;':"'",'&#8216;':"'"}
	regex = re.compile("|".join(map(re.escape, command.keys())))
	return regex.sub(lambda mo: command[mo.group(0)], text)

def addVideo(name,url,mode,iconimage,visto,tipo,temporada,episodio,infoLabels,poster,trailer=False,serieNome=False):
	menu = []
	
	if infoLabels: infoLabelsAux = infoLabels
	else: infoLabelsAux = {'Title': name}

	if poster: posterAux = poster
	else: posterAux = iconimage
	
	try:
		name = name.encode('utf-8')
	except:
		name = name
	
	try:
		serieNome = serieNome.encode('utf-8')
	except:
		serieNome = serieNome
	else:
		pass

	fanart = __FANART__
	
	if tipo == 'filme':
		xbmcplugin.setContent(int(sys.argv[1]), 'Movies')
		if __ADDON__.getSetting('trailer-filmes') == 'true':
			try:
				idYoutube = trailer.split('?v=')[-1].split('/')[-1].split('?')[0].split('&')[0]
				linkTrailer = 'plugin://plugin.video.youtube/play/?video_id='+idYoutube
				#idYoutube=trailer.split('=')
				#__ALERTA__(AddonTitle, 'ID: '+idYoutube[1])
				#linkTrailer = 'plugin://plugin.video.youtube/?path=/root/video&action=play_video&videoid='+idYoutube[1]
				#linkTrailer = trailer
			except:
				linkTrailer = ''
		else:
			linkTrailer = ''
	elif tipo == 'serie':
		xbmcplugin.setContent(int(sys.argv[1]), 'tvshows')
		idIMDb = re.compile('imdb=(.+?)&').findall(url)[0]
		linkTrailer = ""
	elif tipo == 'episodio':
		xbmcplugin.setContent(int(sys.argv[1]), 'episodes')
		linkTrailer = ""
	else:
		xbmcplugin.setContent(int(sys.argv[1]), 'Movies')
		linkTrailer = ""
	
	overlay = 6
	playcount = 0

	infoLabelsAux["overlay"] = overlay
	infoLabelsAux["playcount"] = playcount
	
	liz=xbmcgui.ListItem(name, iconImage=iconimage, thumbnailImage=iconimage)
	liz.setInfo( type="Video", infoLabels=infoLabelsAux)
	liz.setProperty('fanart_image', poster)
	liz.setArt({'fanart': poster})
	
	
	if not serieNome:
		serieNome = ''

	u=sys.argv[0]+"?url="+urllib.quote_plus(url)+"&mode="+str(mode)+"&temporada="+str(temporada)+"&episodio="+str(episodio)+"&name="+urllib.quote_plus(name)+"&iconimage="+urllib.quote_plus(iconimage)+"&serieNome="+urllib.quote_plus(serieNome)
	ok=True
	
	if linkTrailer != "":
		menu.append(('Ver Trailer', 'XBMC.PlayMedia(%s)' % (linkTrailer)))
		#menu.append(('Ver Trailer', 'XBMC.RunPlugin(%s?mode=105&name=%s&url=%s&iconimage=%s)'%(sys.argv[0],urllib.quote_plus(name), linkTrailer, urllib.quote_plus(iconimage))))
	
	menu.append(('Download', 'XBMC.RunPlugin(%s?mode=117&name=%s&url=%s&iconimage=%s&serieNome=%s&temporada=%s&episodio=%s)'%(sys.argv[0],urllib.quote_plus(name), urllib.quote_plus(url), urllib.quote_plus(iconimage), urllib.quote_plus(serieNome), str(temporada), str(episodio))))
	liz.addContextMenuItems(menu, replaceItems=True)
	ok=xbmcplugin.addDirectoryItem(handle=int(sys.argv[1]),url=u,listitem=liz,isFolder=False)
	return ok

def AddDir(name, url, mode, iconimage='', logos='', index=-1, move=0, isFolder=True, IsPlayable=False, background=None, cacheMin='0', info='', metah=''):
	urlParams = {'name': name, 'url': url, 'mode': mode, 'iconimage': iconimage, 'logos': logos, 'cache': cacheMin, 'info': info, 'background': background, 'metah': metah}
	liz = xbmcgui.ListItem(name, iconImage=iconimage, thumbnailImage=iconimage )
	if metah:
		liz.setInfo(type="Video", infoLabels=metah)
		liz.setArt({"thumb": metah['cover_url'], "poster": metah['cover_url'], "banner": metah['cover_url'], "fanart": metah['backdrop_url'] })
	else:
		liz.setInfo(type="Video", infoLabels={ "Title": name, "Plot": info })
		#liz.setProperty("Fanart_Image", logos)
		liz.setArt({"poster": iconimage, "banner": logos, "fanart": logos })
	#listMode = 21 # Lists
	if IsPlayable:
		liz.setProperty('IsPlayable', 'true')
	items = []
	if mode == 1 or mode == 2:
		items = []
	if mode == 10:
		urlParams['index'] = index
	
	#u=sys.argv[0]+"?url="+urllib.quote_plus(url)+"&name="+urllib.quote_plus(name)+"&mode="+int(mode)+"&move="+int(move)+"&index="+int(index)+"&iconimage="+str(iconimage)+"&logos="+str(logos)+"&cache="+str(cacheMin)+"&info="+str(info)+"&background="+background+"&metah="+str(metah)
	#u=sys.argv[0]+"?url="+urllib.quote_plus(url)+"&mode="+str(mode)+"&name="+urllib.quote_plus(name)+"&senha="+str(senha)+"&estilo="+urllib.quote_plus(estilo)+"&tipologia="+str(tipo)+"&tipo_user="+str(tipo_user)+"&servidor_user="+str(servidor_user)+"&data_user="+str(data_user)+"&fanart="+str(fanart)
	u = '{0}?{1}'.format(sys.argv[0], urllib.urlencode(urlParams))
	ok=xbmcplugin.addDirectoryItem(handle=int(sys.argv[1]),url=u, listitem=liz,isFolder=isFolder)
	return ok

def GetKeyboardText(title = "", defaultText = ""):
	keyboard = xbmc.Keyboard(defaultText, title)
	keyboard.doModal()
	text = "" if not keyboard.isConfirmed() else keyboard.getText()
	return text

def Refresh():
	xbmc.executebuiltin("XBMC.Container.Refresh()")

def PlayUrl(name, url, iconimage=None, info='', sub='', metah=''):
	if ";;;" in background:
		b = background.split(";;;")
	url = re.sub('\.mp4$', '.mp4?play', url)
	url = common.getFinalUrl(url)
	#xbmc.log('--- Playing "{0}". {1}'.format(name, url), 2)
	listitem = xbmcgui.ListItem(path=url)
	if metah:
		listitem.setInfo(type="Video", infoLabels=metah)
	else:
		listitem.setInfo(type="Video", infoLabels={"mediatype": "video", "Title": name, "Plot": info })
	if sub!='':
		listitem.setSubtitles(['special://temp/example.srt', sub ])
	if iconimage is not None:
		try:
			listitem.setArt({'thumb' : iconimage})
		except:
			listitem.setThumbnailImage(iconimage)
	xbmcplugin.setResolvedUrl(int(sys.argv[1]), True, listitem)
# --------------  FIM NETCINE
###################################################################################
#								FUNCOES JA FEITAS								 #
###################################################################################
def addDir(name,url,mode,estilo,iconimage,tipo,fanart,pasta=True,total=1):
	try:
		name = name.encode('utf-8')
	except:
		name = name
	if(tipo == 'limparcache' and tipo == 'limpartudo'):				
		u=sys.argv[0]+"?url="+urllib.quote_plus(url)+"&mode="+str(mode)
	else:
		u=sys.argv[0]+"?url="+urllib.quote_plus(url)+"&mode="+str(mode)+"&name="+urllib.quote_plus(name)+"&estilo="+urllib.quote_plus(estilo)+"&fanart="+str(fanart)
	ok=True
	liz=xbmcgui.ListItem(name, iconImage=iconimage, thumbnailImage=iconimage)
	liz.setProperty('fanart_image', fanart)
	liz.setArt({'fanart': fanart})
	ok=xbmcplugin.addDirectoryItem(handle=int(sys.argv[1]),url=u,listitem=liz,isFolder=pasta,totalItems=total)
	return ok

def addDir2(name,url,mode,mode2,iconimage,pagina=1,tipo=None,infoLabels=None,poster=None,visto=False):
	if infoLabels: infoLabelsAux = infoLabels
	else: infoLabelsAux = {'Title': name}
	fanart = ''
	if poster: fanart = poster
	else: fanart = iconimage
	
	try:
		name = name.encode('utf-8')
	except:
		name = name

	u=sys.argv[0]+"?url="+urllib.quote_plus(url)+"&modo="+mode2+"&mode="+str(mode)+"&name="+urllib.quote_plus(name)
	
	ok=True

	#fanart = __FANART__

	if tipo == 'filme':
		#fanart = posterAux
		xbmcplugin.setContent(int(sys.argv[1]), 'Movies')
	elif tipo == 'serie':
		#fanart = posterAux
		xbmcplugin.setContent(int(sys.argv[1]), 'tvshows')
	elif tipo == 'episodio':
		#fanart = posterAux
		xbmcplugin.setContent(int(sys.argv[1]), 'episodes')
	else:
		if name != 'Refresh':
			xbmcplugin.setContent(int(sys.argv[1]), 'Movies')
	
	overlay = 6
	playcount = 0
	
	infoLabelsAux["overlay"] = overlay
	infoLabelsAux["playcount"] = playcount
	
	liz=xbmcgui.ListItem(name, iconImage=iconimage, thumbnailImage=iconimage)
	liz.setProperty('fanart_image', fanart)
	liz.setArt({'fanart': fanart})
	liz.setInfo( type="Video", infoLabels=infoLabelsAux )

	ok=xbmcplugin.addDirectoryItem(handle=int(sys.argv[1]),url=u,listitem=liz,isFolder=True)
	return ok

def addLinkCanal(name,url,iconimage,idcanal,id_p):
	infoLabelssss = {"title": name, "genre": 'All'}
	ok=True
	cm=[]
	
	if(idcanal != '0001'):
		cm.append(('Ver programação', 'XBMC.RunPlugin(%s?mode=31&name=%s&url=%s&iconimage=%s&idCanal=%s&idffCanal=%s)'%(sys.argv[0],urllib.quote_plus(name), urllib.quote_plus(url), urllib.quote_plus(iconimage), idCanal, id_p)))
	
	liz = xbmcgui.ListItem(name, iconImage=iconimage, thumbnailImage=iconimage)
	liz.setInfo( type="Video", infoLabels=infoLabelssss)
	liz.addContextMenuItems(cm, replaceItems=False)
	liz.setProperty('IsPlayable', 'true')
	liz.setProperty('fanart_image', os.path.join(__ART_FOLDER__, __SKIN__, 'fundo_tv.png'))
	liz.setArt({'fanart': os.path.join(__ART_FOLDER__, __SKIN__, 'fundo_tv.png')})
	u = sys.argv[0] + "?url=" + urllib.quote_plus(url) + "&mode=11&name=" + urllib.quote_plus(name) + "&iconimage=" + urllib.quote_plus(iconimage)+"&stream_id="+str(idcanal)
	ok=xbmcplugin.addDirectoryItem(handle=int(sys.argv[1]), url=u, listitem=liz)
	return ok

###############################################################################################################
#													EPG													 #
###############################################################################################################
def obter_ficheiro_epg():
	__EPG__ = __ADDON__.getSetting("lista_epg")
	if not xbmcvfs.exists(__FOLDER_EPG__):
		xbmcvfs.mkdirs(__FOLDER_EPG__)

	uncompressed_path = os.path.join(__FOLDER_EPG__, 'epg.xml')
	url = urllib.urlopen(__EPG__)
	codigo = url.read()
	url.close
	
	open(uncompressed_path, 'w').write(codigo)

def getProgramacaoDiaria(idCanal, diahora, codigo):
	source = re.compile('<programme start="(.+?) \+0100" stop="(.+?) \+0100" channel="'+idCanal+'">\s+<title lang="pt">(.+?)<\/title>').findall(codigo)

	programa = ''

	for start, stop, programa1  in source:

		if(int(start) < diahora and int(stop) > diahora):
			programa = programa1
	return programa


def programacao_canal(idCanal):
	__EPG__ = __ADDON__.getSetting("lista_epg")
	url = urllib.urlopen(__EPG__)
	codigo = url.read()
	url.close
	
	ts = time.time()
	st = int(datetime.datetime.fromtimestamp(ts).strftime('%Y%m%d'))

	diahora = int(str(st)+'060000')
	diaamanha = int(str(st+1)+'060000')

	source = re.compile('<programme start="(.+?) \+0100" stop="(.+?) \+0100" channel="'+idCanal+'">\s+<title lang="pt">(.+?)<\/title>').findall(codigo)

	programa = ''

	titles=['[B][COLOR white]Programação:[/COLOR][/B]']

	
	for start, stop, programa1 in source:

		start1 = re.compile('([0-9]{4}[0-1][0-9][0-3][0-9])([0-9]{2})([0-9]{2})([0-9]{2})').findall(start)
		stop1 = re.compile('([0-9]{4}[0-1][0-9][0-3][0-9])([0-9]{2})([0-9]{2})([0-9]{2})').findall(stop)

		if(int(start) > diahora and int(start) < diaamanha ):
			titles.append('\n[B]%s:%s -> %s:%s[/B] - %s' % (start1[0][1], start1[0][2], stop1[0][1], stop1[0][2], programa1))


	programacao = '\n'.join(titles)
	try:
		xbmc.executebuiltin("ActivateWindow(10147)")
		window = xbmcgui.Window(10147)
		xbmc.sleep(100)
		window.getControl(1).setLabel(AddonTitle)
		window.getControl(5).setText(programacao)
	except:
		pass

def abrir_url(url, post=None, header=None, code=False, erro=False, cookie=None):
	if header == None:
		header = headers
	if cookie:
		header['Cookie'] = cookie
	
	if post:
		header['Content-Type'] ='application/x-www-form-urlencoded'
		req = urllib2.Request(url, data=post, headers=header)
	else:
		req = urllib2.Request(url, headers=header)
	try:
		response = urllib2.urlopen(req,context=context)
	except:
		try:
			response = urllib2.urlopen(req)
		except urllib2.HTTPError as response:
			if erro == True:
				return str(response.code), "asd"
	link=response.read()
	
	if 'judicial blblblblbl' in link:
		return 'DNS'
	if code:
		return str(response.code), link

	response.close()
	return link

def addLink2(name,url,iconimage):
	ok=True
	liz = xbmcgui.ListItem(name, iconImage=iconimage, thumbnailImage=iconimage)
	liz.setProperty('fanart_image', iconimage)
	liz.setArt({'fanart': iconimage})
	liz.setInfo( type="Video", infoLabels={ "Title": name })
	liz.setProperty('IsPlayable', 'true')
	u = sys.argv[0] + "?url=" + url + "&mode=106&name=" + name + "&iconimage=" + iconimage
	ok=xbmcplugin.addDirectoryItem(handle=int(sys.argv[1]), url=u, listitem=liz)
	return ok


###################################################################################
#							  DEFININCOES										  #
###################################################################################	

def vista_Grupos():
	opcao = __ADDON__.getSetting('canaisView')
	if opcao == '0': xbmc.executebuiltin("Container.SetViewMode(50)")
	elif opcao == '1': xbmc.executebuiltin("Container.SetViewMode(51)")
	elif opcao == '2': xbmc.executebuiltin("Container.SetViewMode(500)")
	elif opcao == '3': xbmc.executebuiltin("Container.SetViewMode(509)")
	elif opcao == '3': xbmc.executebuiltin("Container.SetViewMode(508)")
	elif opcao == '4': xbmc.executebuiltin("Container.SetViewMode(504)")
	elif opcao == '5': xbmc.executebuiltin("Container.SetViewMode(503)")
	elif opcao == '6': xbmc.executebuiltin("Container.SetViewMode(515)")
	elif opcao == '7': xbmc.executebuiltin("Container.SetViewMode(55)")

def vista_Canais():
	opcao = __ADDON__.getSetting('canaisView2')
	if opcao == '0': xbmc.executebuiltin("Container.SetViewMode(50)")
	elif opcao == '1': xbmc.executebuiltin("Container.SetViewMode(51)")
	elif opcao == '2': xbmc.executebuiltin("Container.SetViewMode(500)")
	elif opcao == '3': xbmc.executebuiltin("Container.SetViewMode(509)")
	elif opcao == '3': xbmc.executebuiltin("Container.SetViewMode(508)")
	elif opcao == '4': xbmc.executebuiltin("Container.SetViewMode(504)")
	elif opcao == '5': xbmc.executebuiltin("Container.SetViewMode(503)")
	elif opcao == '6': xbmc.executebuiltin("Container.SetViewMode(515)")
	elif opcao == '7': xbmc.executebuiltin("Container.SetViewMode(55)")

def vista_menu():
	opcao = __ADDON__.getSetting('menuView')
	if opcao == '0': xbmc.executebuiltin("Container.SetViewMode(50)")
	elif opcao == '1': xbmc.executebuiltin("Container.SetViewMode(51)")
	elif opcao == '2': xbmc.executebuiltin("Container.SetViewMode(500)")
	elif opcao == '3': xbmc.executebuiltin("Container.SetViewMode(509)")
	elif opcao == '3': xbmc.executebuiltin("Container.SetViewMode(508)")
	elif opcao == '4': xbmc.executebuiltin("Container.SetViewMode(504)")
	elif opcao == '5': xbmc.executebuiltin("Container.SetViewMode(503)")
	elif opcao == '6': xbmc.executebuiltin("Container.SetViewMode(515)")
	elif opcao == '7': xbmc.executebuiltin("Container.SetViewMode(55)")

def vista_filmesSeries():
	opcao = __ADDON__.getSetting('filmesSeriesView')
	if opcao == '0': xbmc.executebuiltin("Container.SetViewMode(50)")
	elif opcao == '1': xbmc.executebuiltin("Container.SetViewMode(51)")
	elif opcao == '2': xbmc.executebuiltin("Container.SetViewMode(500)")
	elif opcao == '3': xbmc.executebuiltin("Container.SetViewMode(509)")
	elif opcao == '3': xbmc.executebuiltin("Container.SetViewMode(508)")
	elif opcao == '4': xbmc.executebuiltin("Container.SetViewMode(504)")
	elif opcao == '5': xbmc.executebuiltin("Container.SetViewMode(503)")
	elif opcao == '6': xbmc.executebuiltin("Container.SetViewMode(515)")
	elif opcao == '7': xbmc.executebuiltin("Container.SetViewMode(55)")


def vista_temporadas():
	opcao = __ADDON__.getSetting('temporadasView')
	if opcao == '0': xbmc.executebuiltin("Container.SetViewMode(50)")
	elif opcao == '1': xbmc.executebuiltin("Container.SetViewMode(51)")
	elif opcao == '2': xbmc.executebuiltin("Container.SetViewMode(500)")
	elif opcao == '3': xbmc.executebuiltin("Container.SetViewMode(509)")
	elif opcao == '3': xbmc.executebuiltin("Container.SetViewMode(508)")
	elif opcao == '4': xbmc.executebuiltin("Container.SetViewMode(504)")
	elif opcao == '5': xbmc.executebuiltin("Container.SetViewMode(503)")
	elif opcao == '6': xbmc.executebuiltin("Container.SetViewMode(515)")
	elif opcao == '7': xbmc.executebuiltin("Container.SetViewMode(55)")

def vista_episodios():
	#xbmc.executebuiltin("Container.SetViewMode(50)")
	opcao = __ADDON__.getSetting('episodiosView')
	if opcao == '0': xbmc.executebuiltin("Container.SetViewMode(50)")
	elif opcao == '1': xbmc.executebuiltin("Container.SetViewMode(51)")
	elif opcao == '2': xbmc.executebuiltin("Container.SetViewMode(500)")
	elif opcao == '3': xbmc.executebuiltin("Container.SetViewMode(509)")
	elif opcao == '3': xbmc.executebuiltin("Container.SetViewMode(508)")
	elif opcao == '4': xbmc.executebuiltin("Container.SetViewMode(504)")
	elif opcao == '5': xbmc.executebuiltin("Container.SetViewMode(503)")
	elif opcao == '6': xbmc.executebuiltin("Container.SetViewMode(515)")
	elif opcao == '7': xbmc.executebuiltin("Container.SetViewMode(55)")
############################################################################################################
#												GET PARAMS												 #
############################################################################################################		  
def get_params():
	param=[]
	paramstring=sys.argv[2]
	if len(paramstring)>=2:
		params=sys.argv[2]
		cleanedparams=params.replace('?','')
		if (params[len(params)-1]=='/'): params=params[0:len(params)-2]
		pairsofparams=cleanedparams.split('&')
		param={}
		for i in range(len(pairsofparams)):
			splitparams={}
			splitparams=pairsofparams[i].split('=')
			if (len(splitparams))==2: param[splitparams[0]]=splitparams[1]
	return param


params=get_params()
url=None
buildtipo=None
name=None
mode=None
modo=None
iconimage=None
link=None
senha=None
estilo=None
srtfilm=None
idCanal=None
idffCanal=None
tipologia=None
descricao=None
tipo_user=None
servidor_user=None
data_user=None
s_serv=None
tipo=None
s_user=None
s_pass=None
legenda=None
pagina=None
temporada=None
episodio=None
serieNome=None
fanart=None
thumbnail=None
stream_id=None
duration=None
tiposelect=None
background=None
info=None
logos=None
cache=None
index=None
move=None
metah=None
plot=None

try: 
	logos=urllib.unquote_plus(params["logos"])
except: 
	params = dict(urlparse.parse_qsl(sys.argv[2].replace('?','')))
	logos = params.get('logos', '')

try: 
	cache=urllib.unquote_plus(params["cache"])
except: 
	params = dict(urlparse.parse_qsl(sys.argv[2].replace('?','')))
	cache = params.get('cache', '')

try: 
	index=urllib.unquote_plus(params["index"])
except: 
	params = dict(urlparse.parse_qsl(sys.argv[2].replace('?','')))
	index = params.get('index', '')

try: 
	move=urllib.unquote_plus(params["move"])
except: 
	params = dict(urlparse.parse_qsl(sys.argv[2].replace('?','')))
	move = params.get('move', '')

try: 
	metah=urllib.unquote_plus(params["metah"])
except: 
	params = dict(urlparse.parse_qsl(sys.argv[2].replace('?','')))
	metah = params.get('metah', '')

try: 
	background=urllib.unquote_plus(params["background"])
except: 
	params = dict(urlparse.parse_qsl(sys.argv[2].replace('?','')))
	background = params.get('background', '')

try: 
	info=urllib.unquote_plus(params["info"])
except: 
	params = dict(urlparse.parse_qsl(sys.argv[2].replace('?','')))
	info = params.get('info', '')

try: tipo=params["tipo"]
except: pass
try: duration=urllib.unquote_plus(params["duration"])
except: pass
try: stream_id=urllib.unquote_plus(params["stream_id"])
except: pass
try: url=urllib.unquote_plus(params["url"])
except: pass
try: name=urllib.unquote_plus(params["name"])
except: pass
try: estilo=urllib.unquote_plus(params["estilo"])
except: pass
try: mode=int(params["mode"])
except: pass
try: modo=params["modo"]
except: pass
try: iconimage=urllib.unquote_plus(params["iconimage"])
except: pass
try: senha=urllib.unquote_plus(params["senha"])
except: pass
try: idCanal=urllib.unquote_plus(params["idCanal"])
except: pass
try: idffCanal=params["idffCanal"]
except: pass
try: srtfilm=urllib.unquote_plus(params["srtfilm"])
except: pass
try: tipologia=urllib.unquote_plus(params["tipologia"])
except: pass
try: descricao=urllib.unquote_plus(params["descricao"])
except: pass
try: tipo_user=urllib.unquote_plus(params["tipo_user"])
except: pass
try: servidor_user=urllib.unquote_plus(params["servidor_user"])
except: pass
try: s_serv=urllib.unquote_plus(params["lolserv"])
except: pass
try: s_user=urllib.unquote_plus(params["loluser"])
except: pass
try: s_pass=urllib.unquote_plus(params["lolpass"])
except: pass
try: link=urllib.unquote_plus(params["link"])
except: pass
try: legenda=urllib.unquote_plus(params["legenda"])
except: pass
try: name=urllib.unquote_plus(params["name"])
except: pass
try: temporada=int(params["temporada"])
except: pass
try: episodio=int(params["episodio"])
except: pass
try: mode=int(params["mode"])
except: pass
try: pagina=int(params["pagina"])
except: pass
try: iconimage=urllib.unquote_plus(params["iconimage"])
except: pass
try : serieNome=urllib.unquote_plus(params["serieNome"])
except: pass
try : buildtipo=urllib.unquote_plus(params["buildtipo"])
except: pass
try : fanart=urllib.unquote_plus(params["fanart"])
except: pass
try : plot=urllib.unquote_plus(params["plot"])
except: pass
try : thumbnail=urllib.unquote_plus(params["thumbnail"])
except: pass
try : data_user=urllib.unquote_plus(params["data_user"])
except: pass
try : tiposelect=urllib.unquote_plus(params["tiposelect"])
except: pass



###############################################################################################################
#													MODOS													 #
###############################################################################################################
if mode==None or url==None or len(url)<1: menu()
elif mode==1: abrirVideoClube(str(url))
elif mode==101: listar_grupos1(mode,url,fanart)
elif mode==102: listar_grupos2(mode,url,fanart)
elif mode==103: listar_grupos3(mode,url,fanart)
elif mode==104: listar_grupos4(mode,url,iconimage,fanart)
elif mode==106: abrirExtras()
elif mode==107: listar_grupos5(mode,url,fanart)
elif mode==108: listar_grupos6(mode,url,iconimage,fanart)
elif mode==109: play_mult_canal2(url,iconimage,str(name))
elif mode==2: Abrir_Conta(str(url))
elif mode==3: abrim3u(str(url))
elif mode==4: detect_modification(str(url))
elif mode==5: abrirDefinincoes()
elif mode==6: listatvarchive(str(url))
elif mode==7: listatvarchivecanais(str(name),stream_id,str(url),duration,iconimage,fanart)
elif mode==8: stream_video(name,url,iconimage)
elif mode==9: get_myaccount(name,url,iconimage)
elif mode==10: run_cronjob(name,str(url),iconimage,plot,fanart)
elif mode==11: PlayUrl(name,url,iconimage)
elif mode==13: CLEARCACHE()
elif mode==14: PURGEPACKAGES()
elif mode==20: listamenusseries(str(name),str(url),estilo,tipologia,tipo_user,servidor_user,iconimage,fanart)
elif mode==21: listamenusfilmes(str(name),str(url),estilo,tipologia,tipo_user,servidor_user,iconimage,fanart)
elif mode==24: listamenusanimes(str(name),str(url),estilo,tipologia,tipo_user,servidor_user,iconimage,fanart)
elif mode==11111: filmes2(url)
elif mode==11112: series2(url)
elif mode==11113: player2(name, url, iconimage, modo, temporada, episodio, tipo)
elif mode==11114: getSeasons2(url, modo)
elif mode==11115: getEpisodes2(url)
elif mode==11118: getYears_live(url, modo)
elif mode==11119: getGeneros_live(url, modo)
elif mode==111199: getGeneros2_live(url, modo)
elif mode==11120: pesquisa_live(url, modo)
elif mode==11121: getInfo_live(url, modo)
elif mode==21111: listamenus_liveit1()
elif mode==21112: listamenus_liveit2()
elif mode==111: filmes(url, pagina)
elif mode==123: series(url)
elif mode==118: getGeneros(url)
elif mode==119: getYears(url)
elif mode==120: pesquisa(url)
elif mode==121: anos(url)
elif mode==122: categorias(url)
elif mode==113: player(name, url, iconimage, temporada, episodio, serieNome)
elif mode==114: getSeasons(url)
elif mode==115: getEpisodes(url)
elif mode==117: download(url, name, temporada, episodio, serieNome)
elif mode==31: programacao_canal(idCanal)
elif mode == 32:
	PlayUrl2(name, url, iconimage)

if mode==None or url==None or len(url)<1:
	xbmcplugin.endOfDirectory(int(sys.argv[1]),cacheToDisc=False)
else:
	if mode !=3 and mode !=6 and mode !=7: 
		xbmcplugin.endOfDirectory(int(sys.argv[1]),cacheToDisc=False)
	else: 
		xbmcplugin.endOfDirectory(int(sys.argv[1]),cacheToDisc=True)"))